
sourcing "nvim_exec2()"
line 1:     amenu     PopUp.Open\ in\ web\ browser  gx
line 2:     anoremenu PopUp.Inspect                 <Cmd>Inspect<CR>
line 3:     anoremenu PopUp.Go\ to\ definition      <Cmd>lua vim.lsp.buf.definition()<CR>
line 4:     anoremenu PopUp.Show\ Diagnostics       <Cmd>lua vim.diagnostic.open_float()<CR>
line 5:     anoremenu PopUp.Show\ All\ Diagnostics  <Cmd>lua vim.diagnostic.setqflist()<CR>
line 6:     anoremenu PopUp.Configure\ Diagnostics  <Cmd>help vim.diagnostic.config()<CR>
line 7:     anoremenu PopUp.-1-                     <Nop>
line 8:     vnoremenu PopUp.Cut                     "+x
line 9:     vnoremenu PopUp.Copy                    "+y
line 10:     anoremenu PopUp.Paste                   "+gP
line 11:     vnoremenu PopUp.Paste                   "+P
line 12:     vnoremenu PopUp.Delete                  "_x
line 13:     nnoremenu PopUp.Select\ All             ggVG
line 14:     vnoremenu PopUp.Select\ All             gg0oG$
line 15:     inoremenu PopUp.Select\ All             <C-Home><C-O>VG
line 16:     anoremenu PopUp.-2-                     <Nop>
line 17:     anoremenu PopUp.How-to\ disable\ mouse  <Cmd>help disable-mouse<CR>
line 18:   
finished sourcing nvim_exec2()
Searching for "ftplugin.vim" in runtime path
Searching for "/home/boris/.config/nvim/ftplugin.vim"
Searching for "/etc/xdg/nvim/ftplugin.vim"
Searching for "/usr/share/nvim/runtime/ftplugin.vim"
sourcing "/usr/share/nvim/runtime/ftplugin.vim"
line 1: " Vim support file to switch on loading plugins for file types
line 2: "
line 3: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>
line 4: " Last change:^I2023 Aug 10
line 5: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>
line 6: 
line 7: if exists("did_load_ftplugin")
line 8:   finish
line 9: endif
line 10: let did_load_ftplugin = 1
line 11: 
line 12: augroup filetypeplugin
line 13:   au FileType * call s:LoadFTPlugin()
line 14: 
line 15:   func! s:LoadFTPlugin()
line 39: augroup END
finished sourcing /usr/share/nvim/runtime/ftplugin.vim
Searching for "/usr/lib/nvim/ftplugin.vim"
Searching for "indent.vim" in runtime path
Searching for "/home/boris/.config/nvim/indent.vim"
Searching for "/etc/xdg/nvim/indent.vim"
Searching for "/usr/share/nvim/runtime/indent.vim"
sourcing "/usr/share/nvim/runtime/indent.vim"
line 1: " Vim support file to switch on loading indent files for file types
line 2: "
line 3: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>
line 4: " Last Change:^I2023 Aug 10
line 5: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>
line 6: 
line 7: if exists("did_indent_on")
line 8:   finish
line 9: endif
line 10: let did_indent_on = 1
line 11: 
line 12: augroup filetypeindent
line 13:   au FileType * call s:LoadIndent()
line 14:   func! s:LoadIndent()
line 33: augroup END
finished sourcing /usr/share/nvim/runtime/indent.vim
Searching for "/usr/lib/nvim/indent.vim"
sourcing "/etc/xdg/nvim/sysinit.vim"
line 1: source /usr/share/nvim/archlinux.lua
line 1: sourcing "/usr/share/nvim/archlinux.lua"
finished sourcing /usr/share/nvim/archlinux.lua
continuing in /etc/xdg/nvim/sysinit.vim
finished sourcing /etc/xdg/nvim/sysinit.vim
sourcing "/home/boris/.config/nvim/init.lua"
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /usr/share/nvim/runtime/filetype.lua
line 1: sourcing "/usr/share/nvim/runtime/filetype.lua"
line 0: sourcing "nvim_exec2() called at /usr/share/nvim/runtime/filetype.lua:0"
line 1:   augroup filetypedetect
line 2:   runtime! ftdetect/*.{vim,lua}
Searching for "ftdetect/*.{vim,lua}" in runtime path
Searching for "/home/boris/.config/nvim/ftdetect/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/ftdetect/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftdetect/*.{vim,lua}"
Searching for "/usr/lib64/nvim/ftdetect/*.{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/ftdetect/*.{vim,lua}"
not found in runtime path: "ftdetect/*.{vim,lua}"
line 3:   augroup END
finished sourcing nvim_exec2() called at /usr/share/nvim/runtime/filetype.lua:0
continuing in /usr/share/nvim/runtime/filetype.lua
finished sourcing /usr/share/nvim/runtime/filetype.lua
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
Executing command: "'/home/boris/go/bin/lazygit' '-cd'"


line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
Executing ColorSchemePre Autocommands for "*"
autocommand <Lua 74: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/loader.lua:31>

line 0: sourcing "nvim_exec2() called at ColorSchemePre Autocommands for "*":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at ColorSchemePre Autocommands for "*":0
continuing in ColorSchemePre Autocommands for "*"
line 0: sourcing "nvim_exec2() called at ColorSchemePre Autocommands for "*":0"
line 1: augroup END
finished sourcing nvim_exec2() called at ColorSchemePre Autocommands for "*":0
continuing in ColorSchemePre Autocommands for "*"
Executing: 
Searching for "colors/astrodark.*" in runtime path
Searching for "/home/boris/.config/nvim/colors/astrodark.*"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/colors/astrodark.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/colors/astrodark.*"
line 0: sourcing "/home/boris/.local/share/nvim/lazy/astrotheme/colors/astrodark.lua"
finished sourcing /home/boris/.local/share/nvim/lazy/astrotheme/colors/astrodark.lua
continuing in /home/boris/.config/nvim/init.lua
Executing ColorScheme Autocommands for "*"
autocommand <Lua 208: ~/.local/share/nvim/lazy/astroui/lua/astroui/init.lua:22>

Executing User Autocommands for "AstroColorScheme"
autocommand <Lua 209: ~/.local/share/nvim/lazy/astroui/lua/astroui/lazygit.lua:9>

Executing: 
Executing User Autocommands for "AstroColorScheme"
autocommand <Lua 363: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/heirline.lua:47>

Executing: 
Executing: 
Executing ColorScheme Autocommands for "*"
autocommand <Lua 394: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:628>

Executing: 
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /home/boris/.local/share/nvim/lazy/snacks.nvim/plugin/snacks.lua
line 1: sourcing "/home/boris/.local/share/nvim/lazy/snacks.nvim/plugin/snacks.lua"
finished sourcing /home/boris/.local/share/nvim/lazy/snacks.nvim/plugin/snacks.lua
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /home/boris/.local/share/nvim/lazy/presence.nvim/plugin/presence.vim
line 1: sourcing "/home/boris/.local/share/nvim/lazy/presence.nvim/plugin/presence.vim"
line 1: " Fallback to setting up the plugin automatically
line 2: if !exists("g:presence_has_setup")
line 3: lua << EOF
Searching for "autoload/presence.vim" in runtime path
Searching for "/home/boris/.config/nvim/autoload/presence.vim"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/autoload/presence.vim"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/autoload/presence.vim"
line 6: sourcing "/home/boris/.local/share/nvim/lazy/presence.nvim/autoload/presence.vim"
line 1: " Define autocommands to handle auto-update events
line 2: function presence#SetAutoCmds()
finished sourcing /home/boris/.local/share/nvim/lazy/presence.nvim/autoload/presence.vim
continuing in /home/boris/.local/share/nvim/lazy/presence.nvim/plugin/presence.vim
calling presence#SetAutoCmds()

line 1:     augroup presence_events
line 2:         autocmd!
line 3:         if exists("g:presence_auto_update") && g:presence_auto_update
line 4:             autocmd FocusGained * lua package.loaded.presence:handle_focus_gained()
line 5:             autocmd TextChanged * lua package.loaded.presence:handle_text_changed()
line 6:             autocmd VimLeavePre * lua package.loaded.presence:handle_vim_leave_pre()
line 7:             autocmd WinEnter * lua package.loaded.presence:handle_win_enter()
line 8:             autocmd WinLeave * lua package.loaded.presence:handle_win_leave()
line 9:             autocmd BufEnter * lua package.loaded.presence:handle_buf_enter()
line 10:             autocmd BufAdd * lua package.loaded.presence:handle_buf_add()
line 11:         endif
line 12:     augroup END
presence#SetAutoCmds returning #0

continuing in /home/boris/.local/share/nvim/lazy/presence.nvim/plugin/presence.vim

line 7: endif
finished sourcing /home/boris/.local/share/nvim/lazy/presence.nvim/plugin/presence.vim
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /home/boris/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua
line 1: sourcing "/home/boris/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua"
finished sourcing /home/boris/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1:   augroup DAPUIRefreshHighlights
line 2:     autocmd!
line 3:     autocmd ColorScheme * lua require('dapui.config.highlights').setup()
line 4:   augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1:   hi default link DapUINormal Normal
line 2:   hi default link DapUIVariable Normal
line 3:   hi default DapUIScope guifg=#00F1F5
line 4:   hi default DapUIType guifg=#D484FF
line 5:   hi default link DapUIValue Normal
line 6:   hi default DapUIModifiedValue guifg=#00F1F5 gui=bold
line 7:   hi default DapUIDecoration guifg=#00F1F5
line 8:   hi default DapUIThread guifg=#A9FF68
line 9:   hi default DapUIStoppedThread guifg=#00f1f5
line 10:   hi default link DapUIFrameName Normal
line 11:   hi default DapUISource guifg=#D484FF
line 12:   hi default DapUILineNumber guifg=#00f1f5
line 13:   hi default link DapUIFloatNormal NormalFloat
line 14:   hi default DapUIFloatBorder guifg=#00F1F5
line 15:   hi default DapUIWatchesEmpty guifg=#F70067
line 16:   hi default DapUIWatchesValue guifg=#A9FF68
line 17:   hi default DapUIWatchesError guifg=#F70067
line 18:   hi default DapUIBreakpointsPath guifg=#00F1F5
line 19:   hi default DapUIBreakpointsInfo guifg=#A9FF68
line 20:   hi default DapUIBreakpointsCurrentLine guifg=#A9FF68 gui=bold
line 21:   hi default link DapUIBreakpointsLine DapUILineNumber
line 22:   hi default DapUIBreakpointsDisabledLine guifg=#424242
line 23:   hi default link DapUICurrentFrameName DapUIBreakpointsCurrentLine
line 24:   hi default DapUIStepOver guifg=#00f1f5
line 25:   hi default DapUIStepInto guifg=#00f1f5
line 26:   hi default DapUIStepBack guifg=#00f1f5
line 27:   hi default DapUIStepOut guifg=#00f1f5
line 28:   hi default DapUIStop guifg=#F70067
line 29:   hi default DapUIPlayPause guifg=#A9FF68
line 30:   hi default DapUIRestart guifg=#A9FF68
line 31:   hi default DapUIUnavailable guifg=#424242
line 32:   hi default DapUIWinSelect ctermfg=Cyan guifg=#00f1f5 gui=bold
line 33:   hi default link DapUIEndofBuffer EndofBuffer
line 34:   
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1:   hi default link DapUINormal Normal
line 2:   hi default link DapUIVariable Normal
line 3:   hi default DapUIScope guifg=#00F1F5
line 4:   hi default DapUIType guifg=#D484FF
line 5:   hi default link DapUIValue Normal
line 6:   hi default DapUIModifiedValue guifg=#00F1F5 gui=bold
line 7:   hi default DapUIDecoration guifg=#00F1F5
line 8:   hi default DapUIThread guifg=#A9FF68
line 9:   hi default DapUIStoppedThread guifg=#00f1f5
line 10:   hi default link DapUIFrameName Normal
line 11:   hi default DapUISource guifg=#D484FF
line 12:   hi default DapUILineNumber guifg=#00f1f5
line 13:   hi default link DapUIFloatNormal NormalFloat
line 14:   hi default DapUIFloatBorder guifg=#00F1F5
line 15:   hi default DapUIWatchesEmpty guifg=#F70067
line 16:   hi default DapUIWatchesValue guifg=#A9FF68
line 17:   hi default DapUIWatchesError guifg=#F70067
line 18:   hi default DapUIBreakpointsPath guifg=#00F1F5
line 19:   hi default DapUIBreakpointsInfo guifg=#A9FF68
line 20:   hi default DapUIBreakpointsCurrentLine guifg=#A9FF68 gui=bold
line 21:   hi default link DapUIBreakpointsLine DapUILineNumber
line 22:   hi default DapUIBreakpointsDisabledLine guifg=#424242
line 23:   hi default link DapUICurrentFrameName DapUIBreakpointsCurrentLine
line 24:   hi default DapUIStepOver guifg=#00f1f5
line 25:   hi default DapUIStepInto guifg=#00f1f5
line 26:   hi default DapUIStepBack guifg=#00f1f5
line 27:   hi default DapUIStepOut guifg=#00f1f5
line 28:   hi default DapUIStop guifg=#F70067
line 29:   hi default DapUIPlayPause guifg=#A9FF68
line 30:   hi default DapUIRestart guifg=#A9FF68
line 31:   hi default DapUIUnavailable guifg=#424242
line 32:   hi default DapUIWinSelect ctermfg=Cyan guifg=#00f1f5 gui=bold
line 33:   hi default link DapUIEndofBuffer EndofBuffer
line 34:   
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /home/boris/.local/share/nvim/lazy/blink.cmp/plugin/blink-cmp.lua
line 1: sourcing "/home/boris/.local/share/nvim/lazy/blink.cmp/plugin/blink-cmp.lua"
finished sourcing /home/boris/.local/share/nvim/lazy/blink.cmp/plugin/blink-cmp.lua
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /home/boris/.local/share/nvim/lazy/nvim-dap/plugin/dap.lua
line 1: sourcing "/home/boris/.local/share/nvim/lazy/nvim-dap/plugin/dap.lua"
finished sourcing /home/boris/.local/share/nvim/lazy/nvim-dap/plugin/dap.lua
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /home/boris/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim
line 1: sourcing "/home/boris/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim"
line 1: 
line 2: " Create command for running busted
line 3: command! -nargs=1 -complete=file PlenaryBustedFile lua require('plenary.test_harness').test_file([[<args>]])
line 5: 
line 6: command! -nargs=+ -complete=file PlenaryBustedDirectory lua require('plenary.test_harness').test_directory_command([[<args>]])
line 8: 
line 9: nnoremap <Plug>PlenaryTestFile :lua require('plenary.test_harness').test_file(vim.fn.expand("%:p"))<CR>
finished sourcing /home/boris/.local/share/nvim/lazy/plenary.nvim/plugin/plenary.vim
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1:  highlight default link NvimDapSubtleFrame Comment 
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1:  highlight default link NvimDapSubtleFrame Comment 
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /usr/share/nvim/runtime/plugin/editorconfig.lua
line 1: sourcing "/usr/share/nvim/runtime/plugin/editorconfig.lua"
finished sourcing /usr/share/nvim/runtime/plugin/editorconfig.lua
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /usr/share/nvim/runtime/plugin/man.lua
line 1: sourcing "/usr/share/nvim/runtime/plugin/man.lua"
finished sourcing /usr/share/nvim/runtime/plugin/man.lua
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /usr/share/nvim/runtime/plugin/matchit.vim
line 1: sourcing "/usr/share/nvim/runtime/plugin/matchit.vim"
line 1: " Nvim: load the matchit plugin by default.
line 2: if !exists("g:loaded_matchit") && stridx(&packpath, $VIMRUNTIME) >= 0
line 3:   packadd matchit
Searching for "pack/*/start/matchit" in "/usr/share/nvim/runtime"
Searching for "/usr/share/nvim/runtime/pack/*/start/matchit"
not found in 'packpath': "pack/*/start/matchit"
Searching for "pack/*/opt/matchit" in "/usr/share/nvim/runtime"
Searching for "/usr/share/nvim/runtime/pack/*/opt/matchit"
line 3: sourcing "/usr/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim"
line 1: "  matchit.vim: (global plugin) Extended "%" matching
line 2: "  Maintainer:  Christian Brabandt
line 3: "  Version:     1.20
line 4: "  Last Change: 2024 May 20
line 5: "  Repository:  https://github.com/chrisbra/matchit
line 6: "  Previous URL:http://www.vim.org/script.php?script_id=39
line 7: "  Previous Maintainer:  Benji Fisher PhD   <benji@member.AMS.org>
line 8: 
line 9: " Documentation:
line 10: "  The documentation is in a separate file: ../doc/matchit.txt
line 11: 
line 12: " Credits:
line 13: "  Vim editor by Bram Moolenaar (Thanks, Bram!)
line 14: "  Original script and design by Raul Segura Acevedo
line 15: "  Support for comments by Douglas Potts
line 16: "  Support for back references and other improvements by Benji Fisher
line 17: "  Support for many languages by Johannes Zellner
line 18: "  Suggestions for improvement, bug reports, and support for additional
line 19: "  languages by Jordi-Albert Batalla, Neil Bird, Servatius Brandt, Mark
line 20: "  Collett, Stephen Wall, Dany St-Amant, Yuheng Xie, and Johannes Zellner.
line 21: 
line 22: " Debugging:
line 23: "  If you'd like to try the built-in debugging commands...
line 24: "   :MatchDebug      to activate debugging for the current buffer
line 25: "  This saves the values of several key script variables as buffer-local
line 26: "  variables.  See the MatchDebug() function, below, for details.
line 27: 
line 28: " TODO:  I should think about multi-line patterns for b:match_words.
line 29: "   This would require an option:  how many lines to scan (default 1).
line 30: "   This would be useful for Python, maybe also for *ML.
line 31: " TODO:  Maybe I should add a menu so that people will actually use some of
line 32: "   the features that I have implemented.
line 33: " TODO:  Eliminate the MultiMatch function.  Add yet another argument to
line 34: "   Match_wrapper() instead.
line 35: " TODO:  Allow :let b:match_words = '\(\(foo\)\(bar\)\):\3\2:end\1'
line 36: " TODO:  Make backrefs safer by using '\V' (very no-magic).
line 37: " TODO:  Add a level of indirection, so that custom % scripts can use my
line 38: "   work but extend it.
line 39: 
line 40: " Allow user to prevent loading and prevent duplicate loading.
line 41: if exists("g:loaded_matchit") || &cp
line 42:   finish
line 43: endif
line 44: let g:loaded_matchit = 1
line 45: 
line 46: let s:save_cpo = &cpo
line 47: set cpo&vim
line 48: 
line 49: fun MatchEnable()
line 89: 
line 90: fun MatchDisable()
line 108: 
line 109: " Call this function to turn on debugging information.  Every time the main
line 110: " script is run, buffer variables will be saved.  These can be used directly
line 111: " or viewed using the menu items below.
line 112: if !exists(":MatchDebug")
line 113:   command! -nargs=0 MatchDebug call matchit#Match_debug()
line 114: endif
line 115: if !exists(":MatchDisable")
line 116:   command! -nargs=0 MatchDisable :call MatchDisable()
line 117: endif
line 118: if !exists(":MatchEnable")
line 119:   command! -nargs=0 MatchEnable :call MatchEnable()
line 120: endif
line 121: 
line 122: call MatchEnable()
calling MatchEnable()

line 1:   nnoremap <silent> <Plug>(MatchitNormalForward)     :<C-U>call matchit#Match_wrapper('',1,'n')<CR>
line 2:   nnoremap <silent> <Plug>(MatchitNormalBackward)    :<C-U>call matchit#Match_wrapper('',0,'n')<CR>
line 3:   xnoremap <silent> <Plug>(MatchitVisualForward)     :<C-U>call matchit#Match_wrapper('',1,'v')<CR>:if col("''") != col("$") \| exe ":normal! m'" \| endif<cr>gv``
line 5:   xnoremap <silent> <Plug>(MatchitVisualBackward)    :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``
line 6:   onoremap <silent> <Plug>(MatchitOperationForward)  :<C-U>call matchit#Match_wrapper('',1,'o')<CR>
line 7:   onoremap <silent> <Plug>(MatchitOperationBackward) :<C-U>call matchit#Match_wrapper('',0,'o')<CR>
line 8: 
line 9:   " Analogues of [{ and ]} using matching patterns:
line 10:   nnoremap <silent> <Plug>(MatchitNormalMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>
line 11:   nnoremap <silent> <Plug>(MatchitNormalMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>
line 12:   xnoremap <silent> <Plug>(MatchitVisualMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``
line 13:   xnoremap <silent> <Plug>(MatchitVisualMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``
line 14:   onoremap <silent> <Plug>(MatchitOperationMultiBackward) :<C-U>call matchit#MultiMatch("bW", "o")<CR>
line 15:   onoremap <silent> <Plug>(MatchitOperationMultiForward)  :<C-U>call matchit#MultiMatch("W",  "o")<CR>
line 16: 
line 17:   " text object:
line 18:   xmap <silent> <Plug>(MatchitVisualTextObject) <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
line 19: 
line 20:   if !exists("g:no_plugin_maps")
line 21:     nmap <silent> %  <Plug>(MatchitNormalForward)
line 22:     nmap <silent> g% <Plug>(MatchitNormalBackward)
line 23:     xmap <silent> %  <Plug>(MatchitVisualForward)
line 24:     xmap <silent> g% <Plug>(MatchitVisualBackward)
line 25:     omap <silent> %  <Plug>(MatchitOperationForward)
line 26:     omap <silent> g% <Plug>(MatchitOperationBackward)
line 27: 
line 28:     " Analogues of [{ and ]} using matching patterns:
line 29:     nmap <silent> [% <Plug>(MatchitNormalMultiBackward)
line 30:     nmap <silent> ]% <Plug>(MatchitNormalMultiForward)
line 31:     xmap <silent> [% <Plug>(MatchitVisualMultiBackward)
line 32:     xmap <silent> ]% <Plug>(MatchitVisualMultiForward)
line 33:     omap <silent> [% <Plug>(MatchitOperationMultiBackward)
line 34:     omap <silent> ]% <Plug>(MatchitOperationMultiForward)
line 35: 
line 36:     " Text object
line 37:     xmap a% <Plug>(MatchitVisualTextObject)
line 38:   endif
MatchEnable returning #0

continuing in /usr/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim

line 123: 
line 124: let &cpo = s:save_cpo
line 125: unlet s:save_cpo
line 126: 
line 127: " vim:sts=2:sw=2:et:
finished sourcing /usr/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim
continuing in /usr/share/nvim/runtime/plugin/matchit.vim
line 3: augroup filetypedetect
line 3: augroup END
line 4: endif
finished sourcing /usr/share/nvim/runtime/plugin/matchit.vim
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /usr/share/nvim/runtime/plugin/matchparen.vim
line 1: sourcing "/usr/share/nvim/runtime/plugin/matchparen.vim"
line 1: " Vim plugin for showing matching parens
line 2: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>
line 3: " Last Change:^I2025 Mar 14
line 4: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>
line 5: 
line 6: " Exit quickly when:
line 7: " - this plugin was already loaded (or disabled)
line 8: " - when 'compatible' is set
line 9: " - Vim has no support for :defer
line 10: if exists("g:loaded_matchparen") || &cp || exists(":defer") != 2
line 12:   finish
line 13: endif
line 14: let g:loaded_matchparen = 1
line 15: 
line 16: if !exists("g:matchparen_timeout")
line 17:   let g:matchparen_timeout = 300
line 18: endif
line 19: if !exists("g:matchparen_insert_timeout")
line 20:   let g:matchparen_insert_timeout = 60
line 21: endif
line 22: if !exists("g:matchparen_disable_cursor_hl")
line 23:   let g:matchparen_disable_cursor_hl = 0
line 24: endif
line 25: 
line 26: augroup matchparen
line 27:   " Replace all matchparen autocommands
line 28:   autocmd! CursorMoved,CursorMovedI,WinEnter,WinScrolled * call s:Highlight_Matching_Pair()
line 29:   autocmd! BufWinEnter * autocmd SafeState * ++once call s:Highlight_Matching_Pair()
line 30:   autocmd! WinLeave,BufLeave * call s:Remove_Matches()
line 31:   autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()
line 32:   autocmd! TextChangedP * call s:Remove_Matches()
line 33: augroup END
line 34: 
line 35: " Skip the rest if it was already done.
line 36: if exists("*s:Highlight_Matching_Pair")
line 37:   finish
line 38: endif
line 39: 
line 40: let s:cpo_save = &cpo
line 41: set cpo-=C
line 42: 
line 43: " The function that is invoked (very often) to define a ":match" highlighting
line 44: " for any matching paren.
line 45: func s:Highlight_Matching_Pair()
line 202: 
line 203: func s:Remove_Matches()
line 211: 
line 212: " Define commands that will disable and enable the plugin.
line 213: command DoMatchParen call s:DoMatchParen()
line 214: command NoMatchParen call s:NoMatchParen()
line 215: 
line 216: func s:NoMatchParen()
line 223: 
line 224: func s:DoMatchParen()
line 230: 
line 231: let &cpo = s:cpo_save
line 232: unlet s:cpo_save
finished sourcing /usr/share/nvim/runtime/plugin/matchparen.vim
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /usr/share/nvim/runtime/plugin/osc52.lua
line 1: sourcing "/usr/share/nvim/runtime/plugin/osc52.lua"
finished sourcing /usr/share/nvim/runtime/plugin/osc52.lua
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /usr/share/nvim/runtime/plugin/rplugin.vim
line 1: sourcing "/usr/share/nvim/runtime/plugin/rplugin.vim"
line 1: if exists('g:loaded_remote_plugins')
line 2:   finish
line 3: endif
line 4: let g:loaded_remote_plugins = '/path/to/manifest'
line 5: 
line 6: " Get the path to the rplugin manifest file.
line 7: function! s:GetManifestPath() abort
line 26: 
line 27: " Old manifest file based on known script locations.
line 28: function! s:GetOldManifestPaths() abort
line 43: 
line 44: function! s:GetManifest() abort
line 57: 
line 58: function! s:LoadRemotePlugins() abort
line 64: 
line 65: command! -bar UpdateRemotePlugins call remote#host#UpdateRemotePlugins()
line 66: 
line 67: if index(v:argv, "--clean") < 0
line 68:   call s:LoadRemotePlugins()
calling <SNR>43_LoadRemotePlugins()

line 1:   let g:loaded_remote_plugins = s:GetManifest()
calling <SNR>43_GetManifest()

line 1:   let manifest = s:GetManifestPath()
calling <SNR>43_GetManifestPath()

line 1:   let manifest_base = ''
line 2: 
line 3:   if exists('$NVIM_RPLUGIN_MANIFEST')
line 4:     return fnamemodify($NVIM_RPLUGIN_MANIFEST, ':p')
line 5:   endif
line 6: 
line 7:   let dest = stdpath('data')
line 8:   if !empty(dest)
line 9:     if !isdirectory(dest)
line 10:       if getftype(dest) != "link"
line 11:         call mkdir(dest, 'p', 0700)
line 12:       endif
line 13:     endif
line 14:     let manifest_base = dest
line 15:   endif
line 16: 
line 17:   return manifest_base.'/rplugin.vim'
<SNR>43_GetManifestPath returning '/home/boris/.local/share/nvim/rplugin.vim'

continuing in <SNR>43_GetManifest

line 2:   if !filereadable(manifest)
line 3:     " Check if an old manifest file exists and move it to the new location.
line 4:     for old_manifest in s:GetOldManifestPaths()
calling <SNR>43_GetOldManifestPaths()

line 1:   let prefix = exists('$MYVIMRC') ? $MYVIMRC : matchstr(get(split(execute('scriptnames'), '\n'), 0, ''), '\f\+$')
line 4:   let origpath = fnamemodify(expand(prefix, 1), ':h').'/.'.fnamemodify(prefix, ':t').'-rplugin~'
line 6:   if !has('win32')
line 7:     return [origpath]
<SNR>43_GetOldManifestPaths returning ['/home/boris/.config/nvim/.init.lua-rplugin~']

continuing in <SNR>43_GetManifest

line 5:       if filereadable(old_manifest)
line 6:         call rename(old_manifest, manifest)
line 7:         break
line 8:       endif
line 9:     endfor
line 4:     for old_manifest in s:GetOldManifestPaths()
line 5:       if filereadable(old_manifest)
line 6:         call rename(old_manifest, manifest)
line 7:         break
line 8:       endif
line 9:     endfor
line 10:   endif
line 11:   return manifest
<SNR>43_GetManifest returning '/home/boris/.local/share/nvim/rplugin.vim'

continuing in <SNR>43_LoadRemotePlugins

line 2:   if filereadable(g:loaded_remote_plugins)
line 3:     execute 'source' fnameescape(g:loaded_remote_plugins)
line 4:   endif
<SNR>43_LoadRemotePlugins returning #0

continuing in /usr/share/nvim/runtime/plugin/rplugin.vim

line 69: endif
finished sourcing /usr/share/nvim/runtime/plugin/rplugin.vim
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /usr/share/nvim/runtime/plugin/shada.vim
line 1: sourcing "/usr/share/nvim/runtime/plugin/shada.vim"
line 1: if exists('g:loaded_shada_plugin')
line 2:   finish
line 3: endif
line 4: let g:loaded_shada_plugin = 1
line 5: 
line 6: augroup ShaDaCommands
line 7:   autocmd!
line 8:   autocmd BufReadCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call setline('.', shada#get_strings(readfile(expand('<afile>'),'b'))) |setlocal filetype=shada
line 12:   autocmd FileReadCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call append("'[", shada#get_strings(readfile(expand('<afile>'), 'b')))
line 15:   autocmd BufWriteCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |if writefile(shada#get_binstrings(getline(1, '$')),expand('<afile>'), 'b') == 0 |  let &l:modified = (expand('<afile>') is# bufname(+expand('<abuf>'))? 0: stridx(&cpoptions, '+') != -1) |endif
line 23:   autocmd FileWriteCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call writefile(shada#get_binstrings(getline(min([line("'["), line("']")]),max([line("'["), line("']")]))),expand('<afile>'),'b')
line 30:   autocmd FileAppendCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call writefile(shada#get_binstrings(getline(min([line("'["), line("']")]),max([line("'["), line("']")]))),expand('<afile>'),'ab')
line 37:   autocmd SourceCmd *.shada,*.shada.tmp.[a-z] :execute 'rshada' fnameescape(expand('<afile>'))
line 39: augroup END
finished sourcing /usr/share/nvim/runtime/plugin/shada.vim
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /usr/share/nvim/runtime/plugin/spellfile.vim
line 1: sourcing "/usr/share/nvim/runtime/plugin/spellfile.vim"
line 1: " Vim plugin for downloading spell files
line 2: 
line 3: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")
line 4:   finish
line 5: endif
line 6: let loaded_spellfile_plugin = 1
line 7: 
line 8: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))
finished sourcing /usr/share/nvim/runtime/plugin/spellfile.vim
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /usr/share/nvim/runtime/plugin/tutor.vim
line 1: sourcing "/usr/share/nvim/runtime/plugin/tutor.vim"
line 1: if exists('g:loaded_tutor_mode_plugin') || &compatible
line 2:     finish
line 3: endif
line 4: let g:loaded_tutor_mode_plugin = 1
line 5: 
line 6: command! -nargs=? -complete=custom,tutor#TutorCmdComplete Tutor call tutor#TutorCmd(<q-args>)
finished sourcing /usr/share/nvim/runtime/plugin/tutor.vim
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.config/nvim/init.lua:0"
line 1: source /home/boris/.local/share/nvim/lazy/cmp-dap/after/plugin/cmp_dap.lua
line 1: sourcing "/home/boris/.local/share/nvim/lazy/cmp-dap/after/plugin/cmp_dap.lua"
line 0: sourcing "nvim_exec2() called at /home/boris/.local/share/nvim/lazy/cmp-dap/after/plugin/cmp_dap.lua:0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at /home/boris/.local/share/nvim/lazy/cmp-dap/after/plugin/cmp_dap.lua:0
continuing in /home/boris/.local/share/nvim/lazy/cmp-dap/after/plugin/cmp_dap.lua
line 0: sourcing "nvim_exec2() called at /home/boris/.local/share/nvim/lazy/cmp-dap/after/plugin/cmp_dap.lua:0"
line 1: augroup END
finished sourcing nvim_exec2() called at /home/boris/.local/share/nvim/lazy/cmp-dap/after/plugin/cmp_dap.lua:0
continuing in /home/boris/.local/share/nvim/lazy/cmp-dap/after/plugin/cmp_dap.lua
finished sourcing /home/boris/.local/share/nvim/lazy/cmp-dap/after/plugin/cmp_dap.lua
continuing in nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
finished sourcing nvim_exec2() called at /home/boris/.config/nvim/init.lua:0
continuing in /home/boris/.config/nvim/init.lua
Executing User Autocommands for "LazyDone"
autocommand <Lua 73: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/util.lua:183>

Executing: 
finished sourcing /home/boris/.config/nvim/init.lua
Searching for "filetype.lua filetype.vim" in runtime path
Searching for "/home/boris/.config/nvim/filetype.lua"
Searching for "/home/boris/.config/nvim/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/filetype.vim"
Searching for "/usr/share/nvim/runtime/filetype.lua"
sourcing "/usr/share/nvim/runtime/filetype.lua"
finished sourcing /usr/share/nvim/runtime/filetype.lua
Searching for "/usr/share/nvim/runtime/filetype.vim"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/filetype.lua"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/filetype.vim"
Searching for "/usr/lib64/nvim/filetype.lua"
Searching for "/usr/lib64/nvim/filetype.vim"
Searching for "/home/boris/.local/state/nvim/lazy/readme/filetype.lua"
Searching for "/home/boris/.local/state/nvim/lazy/readme/filetype.vim"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/filetype.lua"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/filetype.vim"
Executing: so $VIMRUNTIME/syntax/syntax.vim
sourcing "/usr/share/nvim/runtime/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>
line 3: " Last Change:^I2023 Aug 10
line 4: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>
line 5: 
line 6: " This file is used for ":syntax on".
line 7: " It installs the autocommands and starts highlighting for all buffers.
line 8: 
line 9: if !has("syntax")
line 10:   finish
line 11: endif
line 12: 
line 13: " If Syntax highlighting appears to be on already, turn it off first, so that
line 14: " any leftovers are cleared.
line 15: if exists("syntax_on") || exists("syntax_manual")
line 16:   so <sfile>:p:h/nosyntax.vim
line 17: endif
line 18: 
line 19: " Load the Syntax autocommands and set the default methods for highlighting.
line 20: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in runtime path
Searching for "/home/boris/.config/nvim/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/syntax/synload.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/syntax/synload.vim"
Searching for "/usr/share/nvim/runtime/syntax/synload.vim"
line 20: sourcing "/usr/share/nvim/runtime/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>
line 3: " Last Change:^I2023 Aug 10
line 4: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>
line 5: 
line 6: " This file sets up for syntax highlighting.
line 7: " It is loaded from "syntax.vim" and "manual.vim".
line 8: " 1. Set the default highlight groups.
line 9: " 2. Install Syntax autocommands for all the available syntax files.
line 10: 
line 11: if !has("syntax")
line 12:   finish
line 13: endif
line 14: 
line 15: " let others know that syntax has been switched on
line 16: let syntax_on = 1
line 17: 
line 18: " Line continuation is used here, remove 'C' from 'cpoptions'
line 19: let s:cpo_save = &cpo
line 20: set cpo&vim
line 21: 
line 22: " First remove all old syntax autocommands.
line 23: au! Syntax
line 24: 
line 25: au Syntax *^I^Icall s:SynSet()
line 26: 
line 27: fun! s:SynSet()
line 58: 
line 59: 
line 60: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)
line 61: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 66: 
line 67: 
line 68: " Source the user-specified syntax highlighting file
line 69: if exists("mysyntaxfile")
line 70:   let s:fname = expand(mysyntaxfile)
line 71:   if filereadable(s:fname)
line 72:     execute "source " . fnameescape(s:fname)
line 73:   endif
line 74: endif
line 75: 
line 76: " Restore 'cpoptions'
line 77: let &cpo = s:cpo_save
line 78: unlet s:cpo_save
finished sourcing /usr/share/nvim/runtime/syntax/synload.vim
continuing in /usr/share/nvim/runtime/syntax/syntax.vim
line 21: 
line 22: " Load the FileType autocommands if not done yet.
line 23: if exists("did_load_filetypes")
line 24:   let s:did_ft = 1
line 25: else
line 26:   filetype on
line 27:   let s:did_ft = 0
line 28: endif
line 29: 
line 30: " Set up the connection between FileType and Syntax autocommands.
line 31: " This makes the syntax automatically set when the file type is detected
line 32: " unless treesitter highlighting is enabled.
line 33: " Avoid an error when 'verbose' is set and <amatch> expansion fails.
line 34: augroup syntaxset
line 35:   au! FileType *^Iif !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
line 36: augroup END
line 37: 
line 38: " Execute the syntax autocommands for the each buffer.
line 39: " If the filetype wasn't detected yet, do that now.
line 40: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 41: " already was set manually (e.g., help buffers).
line 42: doautoall syntaxset FileType
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
line 43: if !s:did_ft
line 44:   doautoall filetypedetect BufRead
line 45: endif
finished sourcing /usr/share/nvim/runtime/syntax/syntax.vim
Reading ShaDa file "/home/boris/.local/state/nvim/shada/main.shada" info marks oldfiles
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 366: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:202>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 437: ~/.local/share/nvim/lazy/nvim-dap-ui/lua/dapui/windows/init.lua:107>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand autocmd SafeState * ++once call s:Highlight_Matching_Pair()

Executing: autocmd SafeState * ++once call s:Highlight_Matching_Pair()
Executing BufEnter Autocommands for "*"
autocommand <Lua 112: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

line 0: sourcing "nvim_exec2() called at BufEnter Autocommands for "*":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at BufEnter Autocommands for "*":0
continuing in BufEnter Autocommands for "*"
line 0: sourcing "nvim_exec2() called at BufEnter Autocommands for "*":0"
line 1: augroup END
finished sourcing nvim_exec2() called at BufEnter Autocommands for "*":0
continuing in BufEnter Autocommands for "*"
Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 375: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:60>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 381: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/neo-tree.lua:25>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:29>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 397: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:633>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 402: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:665>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 210: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/init.lua:187>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua package.loaded.presence:handle_buf_enter()

Executing: lua package.loaded.presence:handle_buf_enter()
Executing VimEnter Autocommands for "*"
autocommand <Lua 68: vim/_defaults.lua:0>

Executing: 
autocommand <Lua 69: vim/_defaults.lua:0>

Executing: 
Executing VimEnter Autocommands for "*"
autocommand <Lua 395: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:633>

Executing: 
Executing VimEnter Autocommands for "*"
autocommand <Lua 401: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:665>

Executing: 
Executing VimEnter Autocommands for "*"
autocommand <Lua 420: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/init.lua:28>

Executing: 
Executing UIEnter Autocommands for "*"
autocommand <Lua 71: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/config.lua:327>

Executing: 
Executing UIEnter Autocommands for "*"
autocommand <Lua 361: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/init.lua:187>

Executing: 
Executing UIEnter Autocommands for "*"
autocommand <Lua 423: /usr/share/nvim/runtime/plugin/osc52.lua:8>

Executing: 
Executing UIEnter Autocommands for "*"
autocommand <Lua 538: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/util.lua:189>

Executing: 
Executing UIEnter Autocommands for "*"
autocommand <Lua 428: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/init.lua:28>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "<buffer=1>"
autocommand <Lua 447: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/dashboard.lua:723>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing SafeState Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in SafeState Autocommands for "*"

Executing TermResponse Autocommands for "*"
autocommand <Lua 67: vim/_defaults.lua:0>

Executing: 
Executing TermResponse Autocommands for "*"
autocommand <Lua 460: /usr/share/nvim/runtime/lua/vim/termcap.lua:36>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 160: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 160: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 160: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 160: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 160: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 160: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 160: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 160: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

line 0: sourcing "nvim_exec2() called at User Autocommands for "LazyLoad":0"
line 1: source /home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/plugin/mason-tool-installer.lua
line 1: sourcing "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/plugin/mason-tool-installer.lua"
finished sourcing /home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/plugin/mason-tool-installer.lua
continuing in nvim_exec2() called at User Autocommands for "LazyLoad":0
finished sourcing nvim_exec2() called at User Autocommands for "LazyLoad":0
continuing in User Autocommands for "LazyLoad"
line 0: sourcing "nvim_exec2() called at User Autocommands for "LazyLoad":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "LazyLoad":0
continuing in User Autocommands for "LazyLoad"
line 0: sourcing "nvim_exec2() called at User Autocommands for "LazyLoad":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "LazyLoad":0
continuing in User Autocommands for "LazyLoad"
Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing User Autocommands for "VeryLazy"
autocommand <Lua 72: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/config.lua:338>

Executing: 
Executing User Autocommands for "VeryLazy"
autocommand <Lua 158: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

line 0: sourcing "nvim_exec2() called at User Autocommands for "VeryLazy":0"
line 1: source /home/boris/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.lua
line 1: sourcing "/home/boris/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.lua"
finished sourcing /home/boris/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
finished sourcing nvim_exec2() called at User Autocommands for "VeryLazy":0
continuing in User Autocommands for "VeryLazy"
line 0: sourcing "nvim_exec2() called at User Autocommands for "VeryLazy":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "VeryLazy":0
continuing in User Autocommands for "VeryLazy"
line 0: sourcing "nvim_exec2() called at User Autocommands for "VeryLazy":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "VeryLazy":0
continuing in User Autocommands for "VeryLazy"
line 0: sourcing "nvim_exec2() called at User Autocommands for "VeryLazy":0"
line 1: source /home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/nvim-treesitter-textobjects.vim
line 1: sourcing "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/nvim-treesitter-textobjects.vim"
line 1: lua << EOF
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectSelect lua require'nvim-treesitter.textobjects.select'.commands.TSTextobjectSelect['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoPreviousStart lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoPreviousStart['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoNextEnd lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoNextEnd['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoNextStart lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoNextStart['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectGotoPreviousEnd lua require'nvim-treesitter.textobjects.move'.commands.TSTextobjectGotoPreviousEnd['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMoveOpposite lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMoveOpposite['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMove lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMove['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltinT lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltinT['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltint lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltint['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltinF lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltinF['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectBuiltinf lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectBuiltinf['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMovePrevious lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMovePrevious['run<bang>'](<f-args>)
line 3: command! -bar TSTextobjectRepeatLastMoveNext lua require'nvim-treesitter.textobjects.repeatable_move'.commands.TSTextobjectRepeatLastMoveNext['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectSwapPrevious lua require'nvim-treesitter.textobjects.swap'.commands.TSTextobjectSwapPrevious['run<bang>'](<f-args>)
line 3: command! -bar -nargs=1 -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectSwapNext lua require'nvim-treesitter.textobjects.swap'.commands.TSTextobjectSwapNext['run<bang>'](<f-args>)
line 3: command! -bar -nargs=+ -complete=custom,nvim_treesitter_textobjects#available_textobjects TSTextobjectPeekDefinitionCode lua require'nvim-treesitter.textobjects.lsp_interop'.commands.TSTextobjectPeekDefinitionCode['run<bang>'](<f-args>)
finished sourcing /home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/nvim-treesitter-textobjects.vim
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
finished sourcing nvim_exec2() called at User Autocommands for "VeryLazy":0
continuing in User Autocommands for "VeryLazy"
line 0: sourcing "nvim_exec2() called at User Autocommands for "VeryLazy":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "VeryLazy":0
continuing in User Autocommands for "VeryLazy"
line 0: sourcing "nvim_exec2() called at User Autocommands for "VeryLazy":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "VeryLazy":0
continuing in User Autocommands for "VeryLazy"
line 0: sourcing "nvim_exec2() called at User Autocommands for "VeryLazy":0"
line 1: source /home/boris/.local/share/nvim/lazy/nvim-treesitter/plugin/nvim-treesitter.lua
line 1: sourcing "/home/boris/.local/share/nvim/lazy/nvim-treesitter/plugin/nvim-treesitter.lua"
Executing: command! -bar -nargs=* -complete=custom,nvim_treesitter#installed_parsers TSUpdate lua require'nvim-treesitter.install'.commands.TSUpdate['run<bang>'](<f-args>)
Executing: command! -bar -nargs=* -complete=custom,nvim_treesitter#installed_parsers TSUpdateSync lua require'nvim-treesitter.install'.commands.TSUpdateSync['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstallFromGrammar lua require'nvim-treesitter.install'.commands.TSInstallFromGrammar['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstallSync lua require'nvim-treesitter.install'.commands.TSInstallSync['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstall lua require'nvim-treesitter.install'.commands.TSInstall['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#installed_parsers TSUninstall lua require'nvim-treesitter.install'.commands.TSUninstall['run<bang>'](<f-args>)
Executing: command! -bar -nargs=? -complete=custom,nvim_treesitter#available_modules TSModuleInfo lua require'nvim-treesitter.info'.commands.TSModuleInfo['run<bang>'](<f-args>)
Executing: command! -bar -nargs=0 TSInstallInfo lua require'nvim-treesitter.info'.commands.TSInstallInfo['run<bang>'](<f-args>)
Executing: command! -bar -nargs=0 TSConfigInfo lua require'nvim-treesitter.configs'.commands.TSConfigInfo['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_modules TSEnable lua require'nvim-treesitter.configs'.commands.TSEnable['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_modules TSToggle lua require'nvim-treesitter.configs'.commands.TSToggle['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_modules TSDisable lua require'nvim-treesitter.configs'.commands.TSDisable['run<bang>'](<f-args>)
Executing: command! -bar -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufToggle lua require'nvim-treesitter.configs'.commands.TSBufToggle['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_query_groups TSEditQueryUserAfter lua require'nvim-treesitter.configs'.commands.TSEditQueryUserAfter['run<bang>'](<f-args>)
Executing: command! -bar -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufDisable lua require'nvim-treesitter.configs'.commands.TSBufDisable['run<bang>'](<f-args>)
Executing: command! -bar -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufEnable lua require'nvim-treesitter.configs'.commands.TSBufEnable['run<bang>'](<f-args>)
Executing: command! -bar -nargs=+ -complete=custom,nvim_treesitter#available_query_groups TSEditQuery lua require'nvim-treesitter.configs'.commands.TSEditQuery['run<bang>'](<f-args>)
finished sourcing /home/boris/.local/share/nvim/lazy/nvim-treesitter/plugin/nvim-treesitter.lua
continuing in nvim_exec2() called at User Autocommands for "VeryLazy":0
finished sourcing nvim_exec2() called at User Autocommands for "VeryLazy":0
continuing in User Autocommands for "VeryLazy"
line 0: sourcing "nvim_exec2() called at User Autocommands for "VeryLazy":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "VeryLazy":0
continuing in User Autocommands for "VeryLazy"
line 0: sourcing "nvim_exec2() called at User Autocommands for "VeryLazy":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "VeryLazy":0
continuing in User Autocommands for "VeryLazy"
Searching for "parser/bash.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/bash.so"
Searching for "/usr/share/nvim/runtime/parser/bash.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/bash.so"
Searching for "/usr/lib64/nvim/parser/bash.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/bash.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/bash.so"
Searching for "parser/c.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/c.so"
Searching for "/usr/share/nvim/runtime/parser/c.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/c.so"
Searching for "/usr/lib64/nvim/parser/c.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/c.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/c.so"
Searching for "parser/lua.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/lua.so"
Searching for "/usr/share/nvim/runtime/parser/lua.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/lua.so"
Searching for "/usr/lib64/nvim/parser/lua.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/lua.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/lua.so"
Searching for "parser/markdown.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/markdown.so"
Searching for "/usr/share/nvim/runtime/parser/markdown.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/markdown.so"
Searching for "/usr/lib64/nvim/parser/markdown.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/markdown.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/markdown.so"
Searching for "parser/markdown_inline.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/markdown_inline.so"
Searching for "/usr/share/nvim/runtime/parser/markdown_inline.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/markdown_inline.so"
Searching for "/usr/lib64/nvim/parser/markdown_inline.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/markdown_inline.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/markdown_inline.so"
Searching for "parser/python.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/python.so"
Searching for "/usr/share/nvim/runtime/parser/python.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/python.so"
Searching for "/usr/lib64/nvim/parser/python.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/python.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/python.so"
Searching for "parser/query.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/query.so"
Searching for "/usr/share/nvim/runtime/parser/query.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/query.so"
Searching for "/usr/lib64/nvim/parser/query.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/query.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/query.so"
Searching for "parser/vim.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/vim.so"
Searching for "/usr/share/nvim/runtime/parser/vim.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/vim.so"
Searching for "/usr/lib64/nvim/parser/vim.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/vim.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/vim.so"
Searching for "parser/vimdoc.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/vimdoc.so"
Searching for "/usr/share/nvim/runtime/parser/vimdoc.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/vimdoc.so"
Searching for "/usr/lib64/nvim/parser/vimdoc.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/vimdoc.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/vimdoc.so"
Searching for "parser/luap.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/luap.so"
Searching for "/usr/share/nvim/runtime/parser/luap.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/luap.so"
Searching for "/usr/lib64/nvim/parser/luap.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/luap.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/luap.so"
Searching for "parser/go.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/go.so"
Searching for "/usr/share/nvim/runtime/parser/go.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/go.so"
Searching for "/usr/lib64/nvim/parser/go.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/go.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/go.so"
Searching for "parser/gomod.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/gomod.so"
Searching for "/usr/share/nvim/runtime/parser/gomod.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/gomod.so"
Searching for "/usr/lib64/nvim/parser/gomod.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/gomod.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/gomod.so"
Searching for "parser/gosum.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/gosum.so"
Searching for "/usr/share/nvim/runtime/parser/gosum.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/gosum.so"
Searching for "/usr/lib64/nvim/parser/gosum.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/gosum.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/gosum.so"
Searching for "parser/gowork.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/gowork.so"
Searching for "/usr/share/nvim/runtime/parser/gowork.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/gowork.so"
Searching for "/usr/lib64/nvim/parser/gowork.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/gowork.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/gowork.so"
Searching for "parser/toml.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/toml.so"
Searching for "/usr/share/nvim/runtime/parser/toml.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/toml.so"
Searching for "/usr/lib64/nvim/parser/toml.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/toml.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/toml.so"
Searching for "parser/rust.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/rust.so"
Searching for "/usr/share/nvim/runtime/parser/rust.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/rust.so"
Searching for "/usr/lib64/nvim/parser/rust.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/rust.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/rust.so"
Searching for "parser/yaml.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/yaml.so"
Searching for "/usr/share/nvim/runtime/parser/yaml.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/yaml.so"
Searching for "/usr/lib64/nvim/parser/yaml.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/yaml.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/yaml.so"
Searching for "parser/dockerfile.so" in runtime path
Searching for "/home/boris/.config/nvim/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/dockerfile.so"
Searching for "/usr/share/nvim/runtime/parser/dockerfile.so"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/dockerfile.so"
Searching for "/usr/lib64/nvim/parser/dockerfile.so"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/dockerfile.so"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/dockerfile.so"
Searching for "parser/snacks_dashboard.*" in runtime path
Searching for "/home/boris/.config/nvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/snacks_dashboard.*"
Searching for "/usr/share/nvim/runtime/parser/snacks_dashboard.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/snacks_dashboard.*"
Searching for "/usr/lib64/nvim/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/snacks_dashboard.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/snacks_dashboard.*"
not found in runtime path: "parser/snacks_dashboard.*"
Executing: 


--- Terminal info --- {{{
&term: xterm-kitty
Description: KovIdTTY
Aliases: xterm-kitty
Boolean capabilities:
  auto_left_margin          bw         = false
  auto_right_margin         am         = true
  no_esc_ctlc               xsb        = false
  ceol_standout_glitch      xhp        = false
  eat_newline_glitch        xenl       = true
  erase_overstrike          eo         = false
  generic_type              gn         = false
  hard_copy                 hc         = false
  has_meta_key              km         = true
  has_status_line           hs         = true
  insert_null_glitch        in         = false
  memory_above              da         = false
  memory_below              db         = false
  move_insert_mode          mir        = true
  move_standout_mode        msgr       = true
  over_strike               os         = false
  status_line_esc_ok        eslok      = false
  dest_tabs_magic_smso      xt         = false
  tilde_glitch              hz         = false
  transparent_underline     ul         = false
  xon_xoff                  xon        = false
  needs_xon_xoff            nxon       = false
  prtr_silent               mc5i       = true
  hard_cursor               chts       = false
  non_rev_rmcup             nrrmc      = false
  no_pad_char               npc        = true
  non_dest_scroll_region    ndscr      = false
  can_change                ccc        = true
  back_color_erase          bce        = false
  hue_lightness_saturation  hls        = false
  col_addr_glitch           xhpa       = false
  cr_cancels_micro_mode     crxm       = false
  has_print_wheel           daisy      = false
  row_addr_glitch           xvpa       = false
  semi_auto_right_margin    sam        = false
  cpi_changes_res           cpix       = false
  lpi_changes_res           lpix       = false
  backspaces_with_bs        OTbs       = false
  crt_no_scrolling          OTns       = false
  no_correctly_working_cr   OTnc       = false
  gnu_has_meta_key          OTMT       = false
  linefeed_is_newline       OTNL       = false
  has_hardware_tabs         OTpt       = false
  return_does_clr_eol       OTxr       = false
Numeric capabilities:
  columns                   cols       = 80
  init_tabs                 it         = 8
  lines                     lines      = 24
  lines_of_memory           lm         = -1
  magic_cookie_glitch       xmc        = -1
  padding_baud_rate         pb         = -1
  virtual_terminal          vt         = -1
  width_status_line         wsl        = -1
  num_labels                nlab       = -1
  label_height              lh         = -1
  label_width               lw         = -1
  max_attributes            ma         = -1
  maximum_windows           wnum       = -1
  max_colors                colors     = 256
  max_pairs                 pairs      = 32767
  no_color_video            ncv        = -1
  buffer_capacity           bufsz      = -1
  dot_vert_spacing          spinv      = -1
  dot_horz_spacing          spinh      = -1
  max_micro_address         maddr      = -1
  max_micro_jump            mjump      = -1
  micro_col_size            mcs        = -1
  micro_line_size           mls        = -1
  number_of_pins            npins      = -1
  output_res_char           orc        = -1
  output_res_line           orl        = -1
  output_res_horz_inch      orhi       = -1
  output_res_vert_inch      orvi       = -1
  print_rate                cps        = -1
  wide_char_size            widcs      = -1
  buttons                   btns       = -1
  bit_image_entwining       bitwin     = -1
  bit_image_type            bitype     = -1
  magic_cookie_glitch_ul    OTug       = -1
  carriage_return_delay     OTdC       = -1
  new_line_delay            OTdN       = -1
  backspace_delay           OTdB       = -1
  horizontal_tab_delay      OTdT       = -1
  number_of_function_keys   OTkn       = -1
String capabilities:
  back_tab                  cbt        = ^[[Z
  bell                      bel        = ^G
  carriage_return           cr         = ^M
  change_scroll_region      csr        = ^[[%i%p1%d;%p2%dr
  clear_all_tabs            tbc        = ^[[3g
  clear_screen              clear      = ^[[H^[[2J
  clr_eol                   el         = ^[[K
  clr_eos                   ed         = ^[[J
  column_address            hpa        = ^[[%i%p1%dG
  cursor_address            cup        = ^[[%i%p1%d;%p2%dH
  cursor_down               cud1       = ^@
  cursor_home               home       = ^[[H
  cursor_invisible          civis      = ^[[?25l
  cursor_left               cub1       = ^H
  cursor_normal             cnorm      = ^[[?12h^[[?25h
  cursor_right              cuf1       = ^[[C
  cursor_up                 cuu1       = ^[[A
  cursor_visible            cvvis      = ^[[?12;25h
  delete_character          dch1       = ^[[P
  delete_line               dl1        = ^[[M
  dis_status_line           dsl        = ^[]2;^[\
  enter_alt_charset_mode    smacs      = ^[(0
  enter_bold_mode           bold       = ^[[1m
  enter_ca_mode             smcup      = ^[[?1049h
  enter_dim_mode            dim        = ^[[2m
  enter_insert_mode         smir       = ^[[4h
  enter_reverse_mode        rev        = ^[[7m
  enter_standout_mode       smso       = ^[[7m
  enter_underline_mode      smul       = ^[[4m
  erase_chars               ech        = ^[[%p1%dX
  exit_alt_charset_mode     rmacs      = ^[(B
  exit_attribute_mode       sgr0       = ^[(B^[[m
  exit_ca_mode              rmcup      = ^[[?1049l
  exit_insert_mode          rmir       = ^[[4l
  exit_standout_mode        rmso       = ^[[27m
  exit_underline_mode       rmul       = ^[[24m
  flash_screen              flash      = ^[[?5h$<100/>^[[?5l
  from_status_line          fsl        = ^G
  insert_line               il1        = ^[[L
  key_backspace             kbs        = ^?
  key_dc                    kdch1      = ^[[3~
  key_down                  kcud1      = ^[OB
  key_f1                    kf1        = ^[OP
  key_f10                   kf10       = ^[[21~
  key_f2                    kf2        = ^[OQ
  key_f3                    kf3        = ^[OR
  key_f4                    kf4        = ^[OS
  key_f5                    kf5        = ^[[15~
  key_f6                    kf6        = ^[[17~
  key_f7                    kf7        = ^[[18~
  key_f8                    kf8        = ^[[19~
  key_f9                    kf9        = ^[[20~
  key_home                  khome      = ^[OH
  key_ic                    kich1      = ^[[2~
  key_left                  kcub1      = ^[OD
  key_npage                 knp        = ^[[6~
  key_ppage                 kpp        = ^[[5~
  key_right                 kcuf1      = ^[OC
  key_sf                    kind       = ^[[1;2B
  key_sr                    kri        = ^[[1;2A
  key_up                    kcuu1      = ^[OA
  keypad_local              rmkx       = ^[[?1l
  keypad_xmit               smkx       = ^[[?1h
  parm_dch                  dch        = ^[[%p1%dP
  parm_delete_line          dl         = ^[[%p1%dM
  parm_down_cursor          cud        = ^[[%p1%dB
  parm_ich                  ich        = ^[[%p1%d@
  parm_index                indn       = ^[[%p1%dS
  parm_insert_line          il         = ^[[%p1%dL
  parm_left_cursor          cub        = ^[[%p1%dD
  parm_right_cursor         cuf        = ^[[%p1%dC
  parm_rindex               rin        = ^[[%p1%dT
  parm_up_cursor            cuu        = ^[[%p1%dA
  repeat_char               rep        = %p1%c^[[%p2%{1}%-%db
  reset_1string             rs1        = ^[]^[\^[c
  restore_cursor            rc         = ^[8
  row_address               vpa        = ^[[%i%p1%dd
  save_cursor               sc         = ^[7
  scroll_forward            ind        = ^@
  scroll_reverse            ri         = ^[M
  set_attributes            sgr        = %?%p9%t^[(0%e^[(B%;^[[0%?%p6%t;1%;%?%p2%t;4%;%?%p1%p3%|%t;7%;%?%p4%t;5%;%?%p7%t;8%;m
  set_tab                   hts        = ^[H
  tab                       ht         = 	
  to_status_line            tsl        = ^[]2;
  key_a1                    ka1        = 
  key_a3                    ka3        = 
  key_c1                    kc1        = 
  key_c3                    kc3        = 
  acs_chars                 acsc       = ++,,--..00``aaffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~
  key_btab                  kcbt       = ^[[Z
  enter_am_mode             smam       = ^[[?7h
  exit_am_mode              rmam       = ^[[?7l
  key_beg                   kbeg       = ^[OE
  key_end                   kend       = ^[OF
  key_help                  khlp       = 
  key_undo                  kund       = 
  key_sbeg                  kBEG       = ^[[1;2E
  key_sdc                   kDC        = ^[[3;2~
  key_send                  kEND       = ^[[1;2F
  key_shome                 kHOM       = ^[[1;2H
  key_sic                   kIC        = ^[[2;2~
  key_sleft                 kLFT       = ^[[1;2D
  key_snext                 kNXT       = ^[[6;2~
  key_sprevious             kPRV       = ^[[5;2~
  key_sright                kRIT       = ^[[1;2C
  key_f11                   kf11       = ^[[23~
  key_f12                   kf12       = ^[[24~
  key_f13                   kf13       = ^[[1;2P
  key_f14                   kf14       = ^[[1;2Q
  key_f15                   kf15       = ^[[13;2~
  key_f16                   kf16       = ^[[1;2S
  key_f17                   kf17       = ^[[15;2~
  key_f18                   kf18       = ^[[17;2~
  key_f19                   kf19       = ^[[18;2~
  key_f20                   kf20       = ^[[19;2~
  key_f21                   kf21       = ^[[20;2~
  key_f22                   kf22       = ^[[21;2~
  key_f23                   kf23       = ^[[23;2~
  key_f24                   kf24       = ^[[24;2~
  key_f25                   kf25       = ^[[1;5P
  key_f26                   kf26       = ^[[1;5Q
  key_f27                   kf27       = ^[[13;5~
  key_f28                   kf28       = ^[[1;5S
  key_f29                   kf29       = ^[[15;5~
  key_f30                   kf30       = ^[[17;5~
  key_f31                   kf31       = ^[[18;5~
  key_f32                   kf32       = ^[[19;5~
  key_f33                   kf33       = ^[[20;5~
  key_f34                   kf34       = ^[[21;5~
  key_f35                   kf35       = ^[[23;5~
  key_f36                   kf36       = ^[[24;5~
  key_f37                   kf37       = ^[[1;6P
  key_f38                   kf38       = ^[[1;6Q
  key_f39                   kf39       = ^[[13;6~
  key_f40                   kf40       = ^[[1;6S
  key_f41                   kf41       = ^[[15;6~
  key_f42                   kf42       = ^[[17;6~
  key_f43                   kf43       = ^[[18;6~
  key_f44                   kf44       = ^[[19;6~
  key_f45                   kf45       = ^[[20;6~
  key_f46                   kf46       = ^[[21;6~
  key_f47                   kf47       = ^[[23;6~
  key_f48                   kf48       = ^[[24;6~
  key_f49                   kf49       = ^[[1;3P
  key_f50                   kf50       = ^[[1;3Q
  key_f51                   kf51       = ^[[13;3~
  key_f52                   kf52       = ^[[1;3S
  key_f53                   kf53       = ^[[15;3~
  key_f54                   kf54       = ^[[17;3~
  key_f55                   kf55       = ^[[18;3~
  key_f56                   kf56       = ^[[19;3~
  key_f57                   kf57       = ^[[20;3~
  key_f58                   kf58       = ^[[21;3~
  key_f59                   kf59       = ^[[23;3~
  key_f60                   kf60       = ^[[24;3~
  key_f61                   kf61       = ^[[1;4P
  key_f62                   kf62       = ^[[1;4Q
  key_f63                   kf63       = ^[[13;4~
  clr_bol                   el1        = ^[[1K
  user6                     u6         = ^[[%i%d;%dR
  user7                     u7         = ^[[6n
  user8                     u8         = ^[[?%[;0123456789]c
  user9                     u9         = ^[[c
  orig_pair                 op         = ^[[39;49m
  orig_colors               oc         = ^[]104^G
  initialize_color          initc      = ^[]4;%p1%d;rgb:%p2%{255}%*%{1000}%/%2.2X/%p3%{255}%*%{1000}%/%2.2X/%p4%{255}%*%{1000}%/%2.2X^[\
  enter_italics_mode        sitm       = ^[[3m
  exit_italics_mode         ritm       = ^[[23m
  key_mouse                 kmous      = ^[[M
  set_a_foreground          setaf      = ^[[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m
  set_a_background          setab      = ^[[%?%p1%{8}%<%t4%p1%d%e%p1%{16}%<%t10%p1%{8}%-%d%e48;5;%p1%d%;m
  set_tb_margin             smgtb      = ^[[%i%p1%d;%p2%dr
Extended boolean capabilities:
  Su                        = true
  Tc                        = true
  XF                        = true
  fullkbd                   = true
Extended string capabilities:
  BD                        = ^[[?2004l
  BE                        = ^[[?2004h
  Cr                        = ^[]112^G
  Cs                        = ^[]12;%p1%s^G
  Ms                        = ^[]52;%p1%s;%p2%s^[\
  PE                        = ^[[201~
  PS                        = ^[[200~
  RV                        = ^[[>c
  Se                        = ^[[2 q
  Setulc                    = ^[[58:2:%p1%{65536}%/%d:%p1%{256}%/%{255}%&%d:%p1%{255}%&%d%;m
  Smulx                     = ^[[4:%p1%dm
  Ss                        = ^[[%p1%d q
  Sync                      = ^[P=%p1%ds^[\
  XR                        = ^[[>0q
  fd                        = ^[[?1004l
  fe                        = ^[[?1004h
  kBEG3                     = ^[[1;3E
  kBEG4                     = ^[[1;4E
  kBEG5                     = ^[[1;5E
  kBEG6                     = ^[[1;6E
  kBEG7                     = ^[[1;7E
  kDC3                      = ^[[3;3~
  kDC4                      = ^[[3;4~
  kDC5                      = ^[[3;5~
  kDC6                      = ^[[3;6~
  kDC7                      = ^[[3;7~
  kDN                       = ^[[1;2B
  kDN3                      = ^[[1;3B
  kDN4                      = ^[[1;4B
  kDN5                      = ^[[1;5B
  kDN6                      = ^[[1;6B
  kDN7                      = ^[[1;7B
  kEND3                     = ^[[1;3F
  kEND4                     = ^[[1;4F
  kEND5                     = ^[[1;5F
  kEND6                     = ^[[1;6F
  kEND7                     = ^[[1;7F
  kHOM3                     = ^[[1;3H
  kHOM4                     = ^[[1;4H
  kHOM5                     = ^[[1;5H
  kHOM6                     = ^[[1;6H
  kHOM7                     = ^[[1;7H
  kIC3                      = ^[[2;3~
  kIC4                      = ^[[2;4~
  kIC5                      = ^[[2;5~
  kIC6                      = ^[[2;6~
  kIC7                      = ^[[2;7~
  kLFT3                     = ^[[1;3D
  kLFT4                     = ^[[1;4D
  kLFT5                     = ^[[1;5D
  kLFT6                     = ^[[1;6D
  kLFT7                     = ^[[1;7D
  kNXT3                     = ^[[6;3~
  kNXT4                     = ^[[6;4~
  kNXT5                     = ^[[6;5~
  kNXT6                     = ^[[6;6~
  kNXT7                     = ^[[6;7~
  kPRV3                     = ^[[5;3~
  kPRV4                     = ^[[5;4~
  kPRV5                     = ^[[5;5~
  kPRV6                     = ^[[5;6~
  kPRV7                     = ^[[5;7~
  kRIT3                     = ^[[1;3C
  kRIT4                     = ^[[1;4C
  kRIT5                     = ^[[1;5C
  kRIT6                     = ^[[1;6C
  kRIT7                     = ^[[1;7C
  kUP                       = ^[[1;2A
  kUP3                      = ^[[1;3A
  kUP4                      = ^[[1;4A
  kUP5                      = ^[[1;5A
  kUP6                      = ^[[1;6A
  kUP7                      = ^[[1;7A
  kxIN                      = ^[[I
  kxOUT                     = ^[[O
  rmxx                      = ^[[29m
  setrgbb                   = ^[[48:2:%p1%d:%p2%d:%p3%dm
  setrgbf                   = ^[[38:2:%p1%d:%p2%d:%p3%dm
  smxx                      = ^[[9m
  ext.resize_screen         = ^[[8;%p1%d;%p2%dt
  ext.reset_scroll_region   = ^[[r
  ext.enter_altfont_mode    = ^[[11m
  ext.save_title            = ^[[22;0t
  ext.restore_title         = ^[[23;0t
  ext.set_title             = ^[]2;%p2%s^G
  ext.enable_lr_margin      = ^[[?69h
  ext.disable_lr_margin     = ^[[?69l
  ext.enable_bpaste         = ^[[?2004h
  ext.disable_bpaste        = ^[[?2004l
  ext.enable_focus          = ^[[?1004h
  ext.disable_focus         = ^[[?1004l
  ext.enable_mouse          = ^[[?1002h^[[?1006h
  ext.disable_mouse         = ^[[?1002l^[[?1006l
  ext.enable_mouse_move     = ^[[?1003h
  ext.disable_mouse_move    = ^[[?1003l
  ext.set_underline_color   = ^[[58:2::%p1%d:%p2%d:%p3%dm
  Sync                      = ^[[?2026%?%p1%{1}%-%tl%eh%;
}}}

Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Executing TermResponse Autocommands for "*"
autocommand <Lua 67: vim/_defaults.lua:0>

Executing: 
Executing TermResponse Autocommands for "*"
autocommand <Lua 460: /usr/share/nvim/runtime/lua/vim/termcap.lua:36>

Executing: 
Executing User Autocommands for "LazyLoad"
autocommand <Lua 362: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:216>

Executing: 
Searching for "autoload/provider/clipboard.vim" in runtime path
Searching for "/home/boris/.config/nvim/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/autoload/provider/clipboard.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/autoload/provider/clipboard.vim"
Searching for "/usr/share/nvim/runtime/autoload/provider/clipboard.vim"
sourcing "/usr/share/nvim/runtime/autoload/provider/clipboard.vim"
line 1: " The clipboard provider uses shell commands to communicate with the clipboard.
line 2: " The provider function will only be registered if a supported command is
line 3: " available.
line 4: 
line 5: if exists('g:loaded_clipboard_provider')
line 6:   finish
line 7: endif
line 8: " Default to 1.  provider#clipboard#Executable() may set 2.
line 9: " To force a reload:
line 10: "   :unlet g:loaded_clipboard_provider
line 11: "   :runtime autoload/provider/clipboard.vim
line 12: let g:loaded_clipboard_provider = 1
line 13: 
line 14: let s:copy = {}
line 15: let s:paste = {}
line 16: let s:clipboard = {}
line 17: 
line 18: " When caching is enabled, store the jobid of the xclip/xsel process keeping
line 19: " ownership of the selection, so we know how long the cache is valid.
line 20: let s:selection = { 'owner': 0, 'data': [], 'stderr_buffered': v:true }
line 21: 
line 22: function! s:selection.on_exit(jobid, data, event) abort
line 35: 
line 36: let s:selections = { '*': s:selection, '+': copy(s:selection) }
line 37: 
line 38: function! s:try_cmd(cmd, ...) abort
line 51: 
line 52: " Returns TRUE if `cmd` exits with success, else FALSE.
line 53: function! s:cmd_ok(cmd) abort
line 57: 
line 58: function! s:split_cmd(cmd) abort
line 61: 
line 62: function! s:set_osc52() abort
line 69: 
line 70: let s:cache_enabled = 1
line 71: let s:err = ''
line 72: 
line 73: function! provider#clipboard#Error() abort
line 76: 
line 77: function! provider#clipboard#Executable() abort
line 196: 
line 197: function! s:clipboard.get(reg) abort
line 214: 
line 215: function! s:clipboard.set(lines, regtype, reg) abort
line 273: 
line 274: function! provider#clipboard#Call(method, args) abort
line 285: 
line 286: " eval_has_provider() decides based on this variable.
line 287: let g:loaded_clipboard_provider = empty(provider#clipboard#Executable()) ? 1 : 2
calling provider#clipboard#Executable()

line 1:   " Setting g:clipboard to v:false explicitly opts-in to using the "builtin" clipboard providers below
line 2:   if exists('g:clipboard') && g:clipboard isnot# v:false
line 3:     if v:t_string ==# type(g:clipboard)
line 4:       if 'osc52' == g:clipboard
line 5:         " User opted-in to OSC 52 by manually setting g:clipboard.
line 6:         return s:set_osc52()
line 7:       endif
line 8:     endif
line 9: 
line 10:     if type({}) isnot# type(g:clipboard) || type({}) isnot# type(get(g:clipboard, 'copy', v:null)) || type({}) isnot# type(get(g:clipboard, 'paste', v:null))
line 13:       let s:err = 'clipboard: invalid g:clipboard'
line 14:       return ''
line 15:     endif
line 16: 
line 17:     let s:copy = {}
line 18:     let s:copy['+'] = s:split_cmd(get(g:clipboard.copy, '+', v:null))
line 19:     let s:copy['*'] = s:split_cmd(get(g:clipboard.copy, '*', v:null))
line 20: 
line 21:     let s:paste = {}
line 22:     let s:paste['+'] = s:split_cmd(get(g:clipboard.paste, '+', v:null))
line 23:     let s:paste['*'] = s:split_cmd(get(g:clipboard.paste, '*', v:null))
line 24: 
line 25:     let s:cache_enabled = get(g:clipboard, 'cache_enabled', 0)
line 26:     return get(g:clipboard, 'name', 'g:clipboard')
line 27:   elseif has('mac')
line 28:     let s:copy['+'] = ['pbcopy']
line 29:     let s:paste['+'] = ['pbpaste']
line 30:     let s:copy['*'] = s:copy['+']
line 31:     let s:paste['*'] = s:paste['+']
line 32:     let s:cache_enabled = 0
line 33:     return 'pbcopy'
line 34:   elseif !empty($WAYLAND_DISPLAY) && executable('wl-copy') && executable('wl-paste')
line 35:     let s:copy['+'] = ['wl-copy', '--type', 'text/plain']
line 36:     let s:paste['+'] = ['wl-paste', '--no-newline']
line 37:     let s:copy['*'] = ['wl-copy', '--primary', '--type', 'text/plain']
line 38:     let s:paste['*'] = ['wl-paste', '--no-newline', '--primary']
line 39:     return 'wl-copy'
provider#clipboard#Executable returning 'wl-copy'

continuing in /usr/share/nvim/runtime/autoload/provider/clipboard.vim

finished sourcing /usr/share/nvim/runtime/autoload/provider/clipboard.vim

Executing: Neotree toggle
Executing OptionSet Autocommands for "runtimepath"
autocommand <Lua 203: /usr/share/nvim/runtime/lua/vim/treesitter/query.lua:338>

Executing: 
sourcing "nvim_exec2()"
line 1: source /home/boris/.local/share/nvim/lazy/neo-tree.nvim/plugin/neo-tree.lua
line 1: sourcing "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/plugin/neo-tree.lua"
finished sourcing /home/boris/.local/share/nvim/lazy/neo-tree.nvim/plugin/neo-tree.lua
continuing in nvim_exec2()
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup filetypedetect
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup END
finished sourcing nvim_exec2()
Executing OptionSet Autocommands for "runtimepath"
autocommand <Lua 203: /usr/share/nvim/runtime/lua/vim/treesitter/query.lua:338>

Executing: 
sourcing "nvim_exec2()"
line 1: augroup filetypedetect
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_leave
line 2: autocmd VimLeavePre * :lua require('neo-tree.events').fire_event('vim_leave', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_resized
line 2: autocmd VimResized * :lua require('neo-tree.events').fire_event('vim_resized', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_buffer_enter
line 2: autocmd BufEnter,BufWinEnter * :lua require('neo-tree.events').fire_event('vim_buffer_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeSignColumn SignColumn
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeStatusLine StatusLine
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeStatusLineNC StatusLineNC
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeEndOfBuffer EndOfBuffer
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeFloatBorder FloatBorder
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeFloatNormal NormalFloat
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeBufferNumber SpecialChar
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeMessage guifg=#3d4047 gui=italic
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeFadeText1 guifg=#626262
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeFadeText2 guifg=#444444
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeDotfile guifg=#626262
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeHiddenByName NeoTreeDotfile
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeCursorLine CursorLine
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeDimText guifg=#3d4047
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeDirectoryName Directory
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeDirectoryIcon Directory
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeFileIcon NeoTreeDirectoryIcon
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeFileName guibg=#NONE guifg=#NONE
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeFileNameOpened guifg=NONE gui=bold
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeSymbolicLinkTarget NeoTreeFileName
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeFilterTerm SpecialChar
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeRootName guifg=NONE gui=bold,italic
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeIndentMarker NeoTreeDimText
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeExpander NeoTreeDimText
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeModified guifg=#d7d787
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeWindowsHidden NeoTreeDotfile
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreePreview Search
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeGitAdded GitSignsAdd
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeGitDeleted GitSignsDelete
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeGitModified GitSignsChange
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeGitConflict guifg=#ff8700 gui=italic,bold
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeGitIgnored NeoTreeDotfile
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeGitRenamed NeoTreeGitModified
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeGitStaged NeoTreeGitAdded
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default link NeoTreeGitUnstaged NeoTreeGitConflict
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeGitUntracked guifg=#ff8700 gui=italic
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeFileStats guifg=#4b4e55
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeFileStatsHeader guifg=#63666f gui=bold
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_git_event
line 2: autocmd User FugitiveChanged :lua require('neo-tree.events').fire_event('git_event', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_buffer_added
line 2: autocmd BufAdd * :lua require('neo-tree.events').fire_event('vim_buffer_added', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_buffer_deleted
line 2: autocmd BufDelete * :lua require('neo-tree.events').fire_event('vim_buffer_deleted', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_buffer_changed
line 2: autocmd BufWritePost * :lua require('neo-tree.events').fire_event('vim_buffer_changed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_dir_changed
line 2: autocmd DirChanged * ++nested :lua require('neo-tree.events').fire_event('vim_dir_changed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_diagnostic_changed
line 2: autocmd DiagnosticChanged * :lua require('neo-tree.events').fire_event('vim_diagnostic_changed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_buffer_modified_set
line 2: autocmd BufModifiedSet * :lua require('neo-tree.events').fire_event('vim_buffer_modified_set', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_terminal_enter
line 2: autocmd TermEnter * :lua require('neo-tree.events').fire_event('vim_terminal_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_after_session_load
line 2: autocmd SessionLoadPost * :lua require('neo-tree.events').fire_event('vim_after_session_load', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_colorscheme
line 2: autocmd ColorScheme * :lua require('neo-tree.events').fire_event('vim_colorscheme', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_win_enter
line 2: autocmd WinEnter * ++nested :lua require('neo-tree.events').fire_event('vim_win_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_tab_closed
line 2: autocmd TabClosed * :lua require('neo-tree.events').fire_event('vim_tab_closed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup NeoTreeEvent_vim_win_closed
line 2: autocmd WinClosed * :lua require('neo-tree.events').fire_event('vim_win_closed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 3: augroup END
finished sourcing nvim_exec2()
Executing BufNew Autocommands for "*"
autocommand <Lua 567: ~/.local/share/nvim/lazy/which-key.nvim/lua/which-key/state.lua:135>

Executing: 
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>2_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/neo-tree[.]{vim,lua} ftplugin/neo-tree_*.{vim,lua} ftplugin/neo-tree/*.{vim,lua}
Searching for "ftplugin/neo-tree[.]{vim,lua} ftplugin/neo-tree_*.{vim,lua} ftplugin/neo-tree/*.{vim,lua}" in runtime path
Searching for "/home/boris/.config/nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.config/nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.config/nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/usr/lib64/nvim/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/usr/lib64/nvim/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/usr/lib64/nvim/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/ftplugin/neo-tree/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/ftplugin/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/ftplugin/neo-tree_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/ftplugin/neo-tree/*.{vim,lua}"
not found in runtime path: "ftplugin/neo-tree[.]{vim,lua} ftplugin/neo-tree_*.{vim,lua} ftplugin/neo-tree/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>2_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>3_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/neo-tree[.]{vim,lua}
Searching for "indent/neo-tree[.]{vim,lua}" in runtime path
Searching for "/home/boris/.config/nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/indent/neo-tree[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/neo-tree[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/neo-tree[.]{vim,lua}"
Searching for "/usr/lib64/nvim/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/indent/neo-tree[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/indent/neo-tree[.]{vim,lua}"
not found in runtime path: "indent/neo-tree[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>3_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand <Lua 365: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:123>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 396: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:633>

Executing: 
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand <Lua 431: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/init.lua:28>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 147: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "parser/neo-tree.*" in runtime path
Searching for "/home/boris/.config/nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/parser/neo-tree.*"
Searching for "/usr/share/nvim/runtime/parser/neo-tree.*"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/parser/neo-tree.*"
Searching for "/usr/lib64/nvim/parser/neo-tree.*"
Searching for "/home/boris/.local/state/nvim/lazy/readme/parser/neo-tree.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/parser/neo-tree.*"
not found in runtime path: "parser/neo-tree.*"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 144: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 145: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 142: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 143: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 140: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing: silent noswapfile vertical topleft 30split
Executing WinLeave Autocommands for "*"
autocommand lua package.loaded.presence:handle_win_leave()

Executing: lua package.loaded.presence:handle_win_leave()
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand <Lua 398: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:633>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand lua package.loaded.presence:handle_win_enter()

Executing: lua package.loaded.presence:handle_win_enter()
Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand <Lua 125: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/dashboard.lua:267>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_win_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_win_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand <Lua 470: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:86>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 375: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:60>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 381: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/neo-tree.lua:25>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:29>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 397: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:633>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 402: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:665>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua package.loaded.presence:handle_buf_enter()

Executing: lua package.loaded.presence:handle_buf_enter()
Executing BufEnter Autocommands for "*"
autocommand <Lua 568: ~/.local/share/nvim/lazy/which-key.nvim/lua/which-key/state.lua:145>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 716: ~/.local/share/nvim/lazy/neo-tree.nvim/plugin/neo-tree.lua:37>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_buffer_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_buffer_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 0: sourcing "nvim_exec2() called at BufEnter Autocommands for "*":0"
line 1:     setlocal cursorline
line 2:     setlocal cursorlineopt=line
line 3:     setlocal nowrap
line 4:     setlocal nolist nospell nonumber norelativenumber
line 5:     
finished sourcing nvim_exec2() called at BufEnter Autocommands for "*":0
continuing in BufEnter Autocommands for "*"
line 0: sourcing "nvim_exec2() called at BufEnter Autocommands for "*":0"
line 1: setlocal winhighlight=Normal:NeoTreeNormal,NormalNC:NeoTreeNormalNC,SignColumn:NeoTreeSignColumn,CursorLine:NeoTreeCursorLine,FloatBorder:NeoTreeFloatBorder,StatusLine:NeoTreeStatusLine,StatusLineNC:NeoTreeStatusLineNC,VertSplit:NeoTreeVertSplit,EndOfBuffer:NeoTreeEndOfBuffer,WinSeparator:NeoTreeWinSeparator
finished sourcing nvim_exec2() called at BufEnter Autocommands for "*":0
continuing in BufEnter Autocommands for "*"
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 366: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:202>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 437: ~/.local/share/nvim/lazy/nvim-dap-ui/lua/dapui/windows/init.lua:107>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand autocmd SafeState * ++once call s:Highlight_Matching_Pair()

Executing: autocmd SafeState * ++once call s:Highlight_Matching_Pair()
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 430: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/init.lua:28>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_buffer_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_buffer_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 0: sourcing "nvim_exec2() called at BufWinEnter Autocommands for "*":0"
line 1:     setlocal cursorline
line 2:     setlocal cursorlineopt=line
line 3:     setlocal nowrap
line 4:     setlocal nolist nospell nonumber norelativenumber
line 5:     
finished sourcing nvim_exec2() called at BufWinEnter Autocommands for "*":0
continuing in BufWinEnter Autocommands for "*"
line 0: sourcing "nvim_exec2() called at BufWinEnter Autocommands for "*":0"
line 1: setlocal winhighlight=Normal:NeoTreeNormal,NormalNC:NeoTreeNormalNC,SignColumn:NeoTreeSignColumn,CursorLine:NeoTreeCursorLine,FloatBorder:NeoTreeFloatBorder,StatusLine:NeoTreeStatusLine,StatusLineNC:NeoTreeStatusLineNC,VertSplit:NeoTreeVertSplit,EndOfBuffer:NeoTreeEndOfBuffer,WinSeparator:NeoTreeWinSeparator
finished sourcing nvim_exec2() called at BufWinEnter Autocommands for "*":0
continuing in BufWinEnter Autocommands for "*"
Executing BufWinEnter Autocommands for "<buffer=2>"
autocommand <Lua 480: ~/.local/share/nvim/lazy/nui.nvim/lua/nui/split/init.lua:234>

Executing: 
Executing: unlet! b:keymap_name
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand <Lua 470: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:86>

Executing: 
Executing WinLeave Autocommands for "*"
autocommand lua package.loaded.presence:handle_win_leave()

Executing: lua package.loaded.presence:handle_win_leave()
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand <Lua 398: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:633>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand lua package.loaded.presence:handle_win_enter()

Executing: lua package.loaded.presence:handle_win_enter()
Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand <Lua 125: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/dashboard.lua:267>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_win_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_win_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
Executing BufEnter Autocommands for "*"
autocommand <Lua 375: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:60>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:29>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 397: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:633>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 402: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:665>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua package.loaded.presence:handle_buf_enter()

Executing: lua package.loaded.presence:handle_buf_enter()
Executing BufEnter Autocommands for "*"
autocommand <Lua 568: ~/.local/share/nvim/lazy/which-key.nvim/lua/which-key/state.lua:145>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_buffer_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_buffer_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 0: sourcing "nvim_exec2() called at BufEnter Autocommands for "*":0"
line 1:     setlocal cursorline
line 2:     setlocal cursorlineopt=line
line 3:     setlocal nowrap
line 4:     setlocal nolist nospell nonumber norelativenumber
line 5:     
finished sourcing nvim_exec2() called at BufEnter Autocommands for "*":0
continuing in BufEnter Autocommands for "*"
line 0: sourcing "nvim_exec2() called at BufEnter Autocommands for "*":0"
line 1: setlocal winhighlight=Normal:NeoTreeNormal,NormalNC:NeoTreeNormalNC,SignColumn:NeoTreeSignColumn,CursorLine:NeoTreeCursorLine,FloatBorder:NeoTreeFloatBorder,StatusLine:NeoTreeStatusLine,StatusLineNC:NeoTreeStatusLineNC,VertSplit:NeoTreeVertSplit,EndOfBuffer:NeoTreeEndOfBuffer,WinSeparator:NeoTreeWinSeparator
finished sourcing nvim_exec2() called at BufEnter Autocommands for "*":0
continuing in BufEnter Autocommands for "*"
Executing BufFilePost Autocommands for "*"
autocommand <Lua 527: /usr/share/nvim/runtime/plugin/editorconfig.lua:4>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing WinResized Autocommands for "*"
autocommand <Lua 71: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/dashboard.lua:251>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing SafeState Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in SafeState Autocommands for "*"

Executing command: "'/bin/zsh' '-c' 'cd "/home/boris/projects/personal-projects/monkdb" && git rev-parse --show-toplevel'"


Executing command: "'/bin/zsh' '-c' 'cd "/home/boris/projects/personal-projects/monkdb" && git config --get remote.origin.url'"


Executing OptionSet Autocommands for "runtimepath"
autocommand <Lua 203: /usr/share/nvim/runtime/lua/vim/treesitter/query.lua:338>

Executing: 
sourcing "nvim_exec2()"
line 1: augroup filetypedetect
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: augroup END
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeRootName_68 guifg=#7d808a gui=bold
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeRootName_60 guifg=#72757e gui=bold
finished sourcing nvim_exec2()
sourcing "nvim_exec2()"
line 1: highlight default NeoTreeRootName_35 guifg=#4d5058 gui=bold
finished sourcing nvim_exec2()
Executing BufNew Autocommands for "*"
autocommand <Lua 567: ~/.local/share/nvim/lazy/which-key.nvim/lua/which-key/state.lua:135>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing BufModifiedSet Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_buffer_modified_set', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_buffer_modified_set', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing TextChanged Autocommands for "*"
autocommand lua package.loaded.presence:handle_text_changed()

Executing: lua package.loaded.presence:handle_text_changed()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

sourcing "nvim_exec2()"
line 1: wincmd w
finished sourcing nvim_exec2()
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand <Lua 470: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:86>

Executing: 
Executing WinLeave Autocommands for "*"
autocommand lua package.loaded.presence:handle_win_leave()

Executing: lua package.loaded.presence:handle_win_leave()
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand <Lua 398: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:633>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand lua package.loaded.presence:handle_win_enter()

Executing: lua package.loaded.presence:handle_win_enter()
Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand <Lua 125: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/dashboard.lua:267>

Executing: 
Executing WinEnter Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_win_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_win_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
Executing BufEnter Autocommands for "*"
autocommand <Lua 375: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:60>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:29>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 397: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:633>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 402: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:665>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua package.loaded.presence:handle_buf_enter()

Executing: lua package.loaded.presence:handle_buf_enter()
Executing BufEnter Autocommands for "*"
autocommand <Lua 568: ~/.local/share/nvim/lazy/which-key.nvim/lua/which-key/state.lua:145>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_buffer_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_buffer_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
sourcing "nvim_exec2()"
line 1: e /home/boris/projects/personal-projects/monkdb/src/main.rs
Executing BufNew Autocommands for "*"
autocommand <Lua 567: ~/.local/share/nvim/lazy/which-key.nvim/lua/which-key/state.lua:135>

Executing: 
Executing BufAdd Autocommands for "*"
autocommand <Lua 374: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:60>

Executing: 
Executing BufAdd Autocommands for "*"
autocommand lua package.loaded.presence:handle_buf_add()

Executing: lua package.loaded.presence:handle_buf_add()
Executing BufAdd Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_buffer_added', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_buffer_added', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in BufLeave Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand <Lua 470: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:86>

Executing: 
Executing BufWinLeave Autocommands for "*"
autocommand <Lua 438: ~/.local/share/nvim/lazy/nvim-dap-ui/lua/dapui/windows/init.lua:107>

Executing: 
Executing BufWipeout Autocommands for "<buffer=1>"
autocommand <Lua 68: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/dashboard.lua:260>

Executing User Autocommands for "SnacksDashboardClosed"
autocommand <Lua 448: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/dashboard.lua:1164>

Executing: 
Executing: 
auto-removing autocommand: BufDelete <buffer=1>
auto-removing autocommand: BufWipeout <buffer=1>
auto-removing autocommand: CursorMoved <buffer=1>
Executing BufReadPre Autocommands for "*"
autocommand <Lua 211: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/init.lua:187>

Executing: 
Reading ShaDa file "/home/boris/.local/state/nvim/shada/main.shada" marks
Executing BufReadPost Autocommands for "*"
autocommand <Lua 128: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

line 0: sourcing "nvim_exec2() called at BufReadPost Autocommands for "*":0"
line 1: source /home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/plugin/persistent-breakpoints.vim
line 1: sourcing "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/plugin/persistent-breakpoints.vim"
line 1: 
line 2: command! PBToggleBreakpoint lua require('persistent-breakpoints.api').toggle_breakpoint()
line 3: command! PBSetConditionalBreakpoint lua require('persistent-breakpoints.api').set_conditional_breakpoint()
line 4: command! PBSetLogPoint lua require('persistent-breakpoints.api').set_log_point()
line 5: command! PBClearAllBreakpoints lua require('persistent-breakpoints.api').clear_all_breakpoints()
line 6: 
line 7: command! PBReload lua require('persistent-breakpoints.api').reload_breakpoints(); vim.notify_once("Command PBReload will be removed in the future since we don't recommand using it directively. But you still can use it by lua module if you really like it.","WARN")
line 8: command! PBStore lua require('persistent-breakpoints.api').store_breakpoints(false) vim.notify_once("Command PBStore will be removed in the future since we don't recommand using it directively. But you still can use it by lua module if you really like it.","WARN")
line 9: command! PBLoad lua require('persistent-breakpoints.api').load_breakpoints() vim.notify_once("Command PBLoad will be removed in the future since we don't recommand using it directively. But you still can use it by lua module if you really like it.","WARN")
finished sourcing /home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/plugin/persistent-breakpoints.vim
continuing in nvim_exec2() called at BufReadPost Autocommands for "*":0
finished sourcing nvim_exec2() called at BufReadPost Autocommands for "*":0
continuing in BufReadPost Autocommands for "*"
line 0: sourcing "nvim_exec2() called at BufReadPost Autocommands for "*":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at BufReadPost Autocommands for "*":0
continuing in BufReadPost Autocommands for "*"
line 0: sourcing "nvim_exec2() called at BufReadPost Autocommands for "*":0"
line 1: augroup END
finished sourcing nvim_exec2() called at BufReadPost Autocommands for "*":0
continuing in BufReadPost Autocommands for "*"
Executing BufReadPost Autocommands for "*"
autocommand <Lua 1173: ~/.local/share/nvim/lazy/persistent-breakpoints.nvim/lua/persistent-breakpoints/init.lua:22>

Executing: 
Executing: 
autocommand <Lua 162: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

line 0: sourcing "nvim_exec2() called at BufReadPost Autocommands for "*":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at BufReadPost Autocommands for "*":0
continuing in BufReadPost Autocommands for "*"
line 0: sourcing "nvim_exec2() called at BufReadPost Autocommands for "*":0"
line 1: augroup END
finished sourcing nvim_exec2() called at BufReadPost Autocommands for "*":0
continuing in BufReadPost Autocommands for "*"
Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 199: /usr/share/nvim/runtime/filetype.lua:10>

Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>2_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/rust[.]{vim,lua} ftplugin/rust_*.{vim,lua} ftplugin/rust/*.{vim,lua}
Searching for "ftplugin/rust[.]{vim,lua} ftplugin/rust_*.{vim,lua} ftplugin/rust/*.{vim,lua}" in runtime path
Searching for "/home/boris/.config/nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.config/nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.config/nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/ftplugin/rust/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/rust[.]{vim,lua}"
line 20: sourcing "/usr/share/nvim/runtime/ftplugin/rust.vim"
line 1: " Language:^IRust
line 2: " Description:^IVim ftplugin for Rust
line 3: " Maintainer:^IChris Morgan <me@chrismorgan.info>
line 4: " Last Change:^I2024 Mar 17
line 5: "^I^I2024 May 23 by Riley Bruins <ribru17@gmail.com ('commentstring')
line 6: " For bugs, patches and license go to https://github.com/rust-lang/rust.vim
line 7: 
line 8: if exists("b:did_ftplugin")
line 9:     finish
line 10: endif
line 11: let b:did_ftplugin = 1
line 12: 
line 13: " vint: -ProhibitAbbreviationOption
line 14: let s:save_cpo = &cpo
line 15: set cpo&vim
line 16: " vint: +ProhibitAbbreviationOption
line 17: 
line 18: if get(b:, 'current_compiler', '') ==# ''
line 19:     if strlen(findfile('Cargo.toml', '.;')) > 0
line 20:         compiler cargo
line 20: command -nargs=* -keepscript CompilerSet setlocal <args>
Searching for "compiler/cargo.*" in runtime path
Searching for "/home/boris/.config/nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/compiler/cargo.*"
Searching for "/usr/share/nvim/runtime/compiler/cargo.*"
line 20: sourcing "/usr/share/nvim/runtime/compiler/cargo.vim"
line 1: " Vim compiler file
line 2: " Compiler:         Cargo Compiler
line 3: " Maintainer:       Damien Radtke <damienradtke@gmail.com>
line 4: " Latest Revision:  2023-09-11
line 5: "                   2024 Apr 05 by The Vim Project (removed :CompilerSet definition)
line 6: " For bugs, patches and license go to https://github.com/rust-lang/rust.vim
line 7: 
line 8: if exists('current_compiler')
line 9:     finish
line 10: endif
line 11: runtime compiler/rustc.vim
Searching for "compiler/rustc.vim" in runtime path
Searching for "/home/boris/.config/nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/compiler/rustc.vim"
Searching for "/usr/share/nvim/runtime/compiler/rustc.vim"
line 11: sourcing "/usr/share/nvim/runtime/compiler/rustc.vim"
line 1: " Vim compiler file
line 2: " Compiler:         Rust Compiler
line 3: " Maintainer:       Chris Morgan <me@chrismorgan.info>
line 4: " Latest Revision:  2023-09-11
line 5: " For bugs, patches and license go to https://github.com/rust-lang/rust.vim
line 6: 
line 7: if exists("current_compiler")
line 8:     finish
line 9: endif
line 10: let current_compiler = "rustc"
line 11: 
line 12: " vint: -ProhibitAbbreviationOption
line 13: let s:save_cpo = &cpo
line 14: set cpo&vim
line 15: " vint: +ProhibitAbbreviationOption
line 16: 
line 17: if get(g:, 'rustc_makeprg_no_percent', 0)
line 18:     CompilerSet makeprg=rustc
line 19: else
line 20:     if has('patch-7.4.191')
line 21:       CompilerSet makeprg=rustc\ \%:S
line 21: setlocal makeprg=rustc\ \%:S
line 22:     else
line 23:       CompilerSet makeprg=rustc\ \"%\"
line 24:     endif
line 25: endif
line 26: 
line 27: " New errorformat (after nightly 2016/08/10)
line 28: CompilerSet errorformat=%-G,%-Gerror:\ aborting\ %.%#,%-Gerror:\ Could\ not\ compile\ %.%#,%Eerror:\ %m,%Eerror[E%n]:\ %m,%Wwarning:\ %m,%Inote:\ %m,%C\ %#-->\ %f:%l:%c,%E\ \ left:%m,%C\ right:%m\ %f:%l:%c,%Z
line 28: setlocal errorformat=%-G,%-Gerror:\ aborting\ %.%#,%-Gerror:\ Could\ not\ compile\ %.%#,%Eerror:\ %m,%Eerror[E%n]:\ %m,%Wwarning:\ %m,%Inote:\ %m,%C\ %#-->\ %f:%l:%c,%E\ \ left:%m,%C\ right:%m\ %f:%l:%c,%Z
line 38: 
line 39: " Old errorformat (before nightly 2016/08/10)
line 40: CompilerSet errorformat+=%f:%l:%c:\ %t%*[^:]:\ %m,%f:%l:%c:\ %*\\d:%*\\d\ %t%*[^:]:\ %m,%-G%f:%l\ %s,%-G%*[\ ]^,%-G%*[\ ]^%*[~],%-G%*[\ ]...
line 40: setlocal errorformat+=%f:%l:%c:\ %t%*[^:]:\ %m,%f:%l:%c:\ %*\\d:%*\\d\ %t%*[^:]:\ %m,%-G%f:%l\ %s,%-G%*[\ ]^,%-G%*[\ ]^%*[~],%-G%*[\ ]...
line 47: 
line 48: " vint: -ProhibitAbbreviationOption
line 49: let &cpo = s:save_cpo
line 50: unlet s:save_cpo
line 51: " vint: +ProhibitAbbreviationOption
line 52: 
line 53: " vim: set et sw=4 sts=4 ts=8:
finished sourcing /usr/share/nvim/runtime/compiler/rustc.vim
continuing in /usr/share/nvim/runtime/compiler/cargo.vim
line 12: let current_compiler = "cargo"
line 13: 
line 14: " vint: -ProhibitAbbreviationOption
line 15: let s:save_cpo = &cpo
line 16: set cpo&vim
line 17: " vint: +ProhibitAbbreviationOption
line 18: 
line 19: if exists('g:cargo_makeprg_params')
line 20:     execute 'CompilerSet makeprg=cargo\ '.escape(g:cargo_makeprg_params, ' \|"').'\ $*'
line 21: else
line 22:     CompilerSet makeprg=cargo\ $*
line 22: setlocal makeprg=cargo\ $*
line 23: endif
line 24: 
line 25: augroup RustCargoQuickFixHooks
line 26:     autocmd!
line 27:     autocmd QuickFixCmdPre make call cargo#quickfix#CmdPre()
line 28:     autocmd QuickFixCmdPost make call cargo#quickfix#CmdPost()
line 29: augroup END
line 30: 
line 31: " Ignore general cargo progress messages
line 32: CompilerSet errorformat+=%-G%\\s%#Downloading%.%#,%-G%\\s%#Checking%.%#,%-G%\\s%#Compiling%.%#,%-G%\\s%#Finished%.%#,%-G%\\s%#error:\ Could\ not\ compile\ %.%#,%-G%\\s%#To\ learn\ more\\,%.%#,%-G%\\s%#For\ more\ information\ about\ this\ error\\,%.%#,%-Gnote:\ Run\ with\ \`RUST_BACKTRACE=%.%#,%.%#panicked\ at\ \\'%m\\'\\,\ %f:%l:%c
line 32: setlocal errorformat+=%-G%\\s%#Downloading%.%#,%-G%\\s%#Checking%.%#,%-G%\\s%#Compiling%.%#,%-G%\\s%#Finished%.%#,%-G%\\s%#error:\ Could\ not\ compile\ %.%#,%-G%\\s%#To\ learn\ more\\,%.%#,%-G%\\s%#For\ more\ information\ about\ this\ error\\,%.%#,%-Gnote:\ Run\ with\ \`RUST_BACKTRACE=%.%#,%.%#panicked\ at\ \\'%m\\'\\,\ %f:%l:%c
line 42: 
line 43: " vint: -ProhibitAbbreviationOption
line 44: let &cpo = s:save_cpo
line 45: unlet s:save_cpo
line 46: " vint: +ProhibitAbbreviationOption
line 47: 
line 48: " vim: set et sw=4 sts=4 ts=8:
finished sourcing /usr/share/nvim/runtime/compiler/cargo.vim
continuing in /usr/share/nvim/runtime/ftplugin/rust.vim
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/compiler/cargo.*"
Searching for "/usr/lib64/nvim/compiler/cargo.*"
Searching for "/home/boris/.local/state/nvim/lazy/readme/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/compiler/cargo.*"
line 20: :delcommand CompilerSet
line 21:     else
line 22:         compiler rustc
line 23:     endif
line 24: endif
line 25: 
line 26: " Variables {{{1
line 27: 
line 28: " The rust source code at present seems to typically omit a leader on /*!
line 29: " comments, so we'll use that as our default, but make it easy to switch.
line 30: " This does not affect indentation at all (I tested it with and without
line 31: " leader), merely whether a leader is inserted by default or not.
line 32: if get(g:, 'rust_bang_comment_leader', 0)
line 33:     " Why is the `,s0:/*,mb:\ ,ex:*/` there, you ask? I don't understand why,
line 34:     " but without it, */ gets indented one space even if there were no
line 35:     " leaders. I'm fairly sure that's a Vim bug.
line 36:     setlocal comments=s1:/*,mb:*,ex:*/,s0:/*,mb:\ ,ex:*/,:///,://!,://
line 37: else
line 38:     setlocal comments=s0:/*!,ex:*/,s1:/*,mb:*,ex:*/,:///,://!,://
line 39: endif
line 40: setlocal commentstring=//\ %s
line 41: setlocal formatoptions-=t formatoptions+=croqnl
line 42: " j was only added in 7.3.541, so stop complaints about its nonexistence
line 43: silent! setlocal formatoptions+=j
line 44: 
line 45: " smartindent will be overridden by indentexpr if filetype indent is on, but
line 46: " otherwise it's better than nothing.
line 47: setlocal smartindent nocindent
line 48: 
line 49: if get(g:, 'rust_recommended_style', 1)
line 50:     let b:rust_set_style = 1
line 51:     setlocal shiftwidth=4 softtabstop=4 expandtab
line 52:     setlocal textwidth=99
line 53: endif
line 54: 
line 55: setlocal include=\\v^\\s*(pub\\s+)?use\\s+\\zs(\\f\|:)+
line 56: setlocal includeexpr=rust#IncludeExpr(v:fname)
line 57: 
line 58: setlocal suffixesadd=.rs
line 59: 
line 60: if exists("g:ftplugin_rust_source_path")
line 61:     let &l:path=g:ftplugin_rust_source_path . ',' . &l:path
line 62: endif
line 63: 
line 64: if exists("g:loaded_delimitMate")
line 65:     if exists("b:delimitMate_excluded_regions")
line 66:         let b:rust_original_delimitMate_excluded_regions = b:delimitMate_excluded_regions
line 67:     endif
line 68: 
line 69:     augroup rust.vim.DelimitMate
line 70:         autocmd!
line 71: 
line 72:         autocmd User delimitMate_map   :call rust#delimitmate#onMap()
line 73:         autocmd User delimitMate_unmap :call rust#delimitmate#onUnmap()
line 74:     augroup END
line 75: endif
line 76: 
line 77: " Integration with auto-pairs (https://github.com/jiangmiao/auto-pairs)
line 78: if exists("g:AutoPairsLoaded") && !get(g:, 'rust_keep_autopairs_default', 0)
line 79:     let b:AutoPairs = {'(':')', '[':']', '{':'}','"':'"', '`':'`'}
line 80: endif
line 81: 
line 82: if has("folding") && get(g:, 'rust_fold', 0)
line 83:     let b:rust_set_foldmethod=1
line 84:     setlocal foldmethod=syntax
line 85:     if g:rust_fold == 2
line 86:         setlocal foldlevel<
line 87:     else
line 88:         setlocal foldlevel=99
line 89:     endif
line 90: endif
line 91: 
line 92: if has('conceal') && get(g:, 'rust_conceal', 0)
line 93:     let b:rust_set_conceallevel=1
line 94:     setlocal conceallevel=2
line 95: endif
line 96: 
line 97: " Motion Commands {{{1
line 98: if !exists("g:no_plugin_maps") && !exists("g:no_rust_maps")
line 99:     " Bind motion commands to support hanging indents
line 100:     nnoremap <silent> <buffer> [[ :call rust#Jump('n', 'Back')<CR>
line 101:     nnoremap <silent> <buffer> ]] :call rust#Jump('n', 'Forward')<CR>
line 102:     xnoremap <silent> <buffer> [[ :call rust#Jump('v', 'Back')<CR>
line 103:     xnoremap <silent> <buffer> ]] :call rust#Jump('v', 'Forward')<CR>
line 104:     onoremap <silent> <buffer> [[ :call rust#Jump('o', 'Back')<CR>
line 105:     onoremap <silent> <buffer> ]] :call rust#Jump('o', 'Forward')<CR>
line 106: endif
line 107: 
line 108: " Commands {{{1
line 109: 
line 110: " See |:RustRun| for docs
line 111: command! -nargs=* -complete=file -bang -buffer RustRun call rust#Run(<bang>0, <q-args>)
line 112: 
line 113: " See |:RustExpand| for docs
line 114: command! -nargs=* -complete=customlist,rust#CompleteExpand -bang -buffer RustExpand call rust#Expand(<bang>0, <q-args>)
line 115: 
line 116: " See |:RustEmitIr| for docs
line 117: command! -nargs=* -buffer RustEmitIr call rust#Emit("llvm-ir", <q-args>)
line 118: 
line 119: " See |:RustEmitAsm| for docs
line 120: command! -nargs=* -buffer RustEmitAsm call rust#Emit("asm", <q-args>)
line 121: 
line 122: " See |:RustPlay| for docs
line 123: command! -range=% -buffer RustPlay :call rust#Play(<count>, <line1>, <line2>, <f-args>)
line 124: 
line 125: " See |:RustFmt| for docs
line 126: command! -bar -buffer RustFmt call rustfmt#Format()
line 127: 
line 128: " See |:RustFmtRange| for docs
line 129: command! -range -buffer RustFmtRange call rustfmt#FormatRange(<line1>, <line2>)
line 130: 
line 131: " See |:RustInfo| for docs
line 132: command! -bar -buffer RustInfo call rust#debugging#Info()
line 133: 
line 134: " See |:RustInfoToClipboard| for docs
line 135: command! -bar -buffer RustInfoToClipboard call rust#debugging#InfoToClipboard()
line 136: 
line 137: " See |:RustInfoToFile| for docs
line 138: command! -bar -nargs=1 -buffer RustInfoToFile call rust#debugging#InfoToFile(<f-args>)
line 139: 
line 140: " See |:RustTest| for docs
line 141: command! -buffer -nargs=* -count -bang RustTest call rust#Test(<q-mods>, <count>, <bang>0, <q-args>)
line 142: 
line 143: if !exists("b:rust_last_rustc_args") || !exists("b:rust_last_args")
line 144:     let b:rust_last_rustc_args = []
line 145:     let b:rust_last_args = []
line 146: endif
line 147: 
line 148: " Cleanup {{{1
line 149: 
line 150: let b:undo_ftplugin = " compiler make | setlocal formatoptions< comments< commentstring< include< includeexpr< suffixesadd<|if exists('b:rust_set_style')|setlocal tabstop< shiftwidth< softtabstop< expandtab< textwidth<|endif|if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile
line 191: 
line 192: " }}}1
line 193: 
line 194: " Code formatting on save
line 195: augroup rust.vim.PreWrite
line 196:     autocmd!
line 197:     autocmd BufWritePre *.rs silent! call rustfmt#PreWrite()
line 198: augroup END
line 199: 
line 200: setlocal matchpairs+=<:>
line 201: " For matchit.vim (rustArrow stops `Fn() -> X` messing things up)
line 202: let b:match_skip = 's:comment\|string\|rustCharacter\|rustArrow'
line 203: 
line 204: command! -buffer -nargs=+ Cargo call cargo#cmd(<q-args>)
line 205: command! -buffer -nargs=* Cbuild call cargo#build(<q-args>)
line 206: command! -buffer -nargs=* Ccheck call cargo#check(<q-args>)
line 207: command! -buffer -nargs=* Cclean call cargo#clean(<q-args>)
line 208: command! -buffer -nargs=* Cdoc call cargo#doc(<q-args>)
line 209: command! -buffer -nargs=+ Cnew call cargo#new(<q-args>)
line 210: command! -buffer -nargs=* Cinit call cargo#init(<q-args>)
line 211: command! -buffer -nargs=* Crun call cargo#run(<q-args>)
line 212: command! -buffer -nargs=* Ctest call cargo#test(<q-args>)
line 213: command! -buffer -nargs=* Cbench call cargo#bench(<q-args>)
line 214: command! -buffer -nargs=* Cupdate call cargo#update(<q-args>)
line 215: command! -buffer -nargs=* Csearch  call cargo#search(<q-args>)
line 216: command! -buffer -nargs=* Cpublish call cargo#publish(<q-args>)
line 217: command! -buffer -nargs=* Cinstall call cargo#install(<q-args>)
line 218: command! -buffer -nargs=* Cruntarget call cargo#runtarget(<q-args>)
line 219: 
line 220: let b:undo_ftplugin .= '|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget'
line 236: 
line 237: " vint: -ProhibitAbbreviationOption
line 238: let &cpo = s:save_cpo
line 239: unlet s:save_cpo
line 240: " vint: +ProhibitAbbreviationOption
line 241: 
line 242: " vim: set et sw=4 sts=4 ts=8:
finished sourcing /usr/share/nvim/runtime/ftplugin/rust.vim
continuing in <SNR>2_LoadFTPlugin
Searching for "/usr/share/nvim/runtime/ftplugin/rust_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/rust/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/rust[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/rust_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/rust/*.{vim,lua}"
Searching for "/usr/lib64/nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/usr/lib64/nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/usr/lib64/nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/ftplugin/rust/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>2_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>3_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/rust[.]{vim,lua}
Searching for "indent/rust[.]{vim,lua}" in runtime path
Searching for "/home/boris/.config/nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/indent/rust[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/rust[.]{vim,lua}"
line 15: sourcing "/usr/share/nvim/runtime/indent/rust.vim"
line 1: " Vim indent file
line 2: " Language:         Rust
line 3: " Author:           Chris Morgan <me@chrismorgan.info>
line 4: " Last Change:      2023-09-11
line 5: " 2024 Jul 04 by Vim Project: use shiftwidth() instead of hard-coding shifted values (#15138)
line 6: 
line 7: " For bugs, patches and license go to https://github.com/rust-lang/rust.vim
line 8: " Note: upstream seems umaintained: https://github.com/rust-lang/rust.vim/issues/502
line 9: 
line 10: " Only load this indent file when no other was loaded.
line 11: if exists("b:did_indent")
line 12:     finish
line 13: endif
line 14: let b:did_indent = 1
line 15: 
line 16: setlocal cindent
line 17: setlocal cinoptions=L0,(s,Ws,J1,j1,m1
line 18: setlocal cinkeys=0{,0},!^F,o,O,0[,0],0(,0)
line 19: " Don't think cinwords will actually do anything at all... never mind
line 20: setlocal cinwords=for,if,else,while,loop,impl,mod,unsafe,trait,struct,enum,fn,extern,macro
line 21: 
line 22: " Some preliminary settings
line 23: setlocal nolisp^I^I" Make sure lisp indenting doesn't supersede us
line 24: setlocal autoindent^I" indentexpr isn't much help otherwise
line 25: " Also do indentkeys, otherwise # gets shoved to column 0 :-/
line 26: setlocal indentkeys=0{,0},!^F,o,O,0[,0],0(,0)
line 27: 
line 28: setlocal indentexpr=GetRustIndent(v:lnum)
line 29: 
line 30: let b:undo_indent = "setlocal cindent< cinoptions< cinkeys< cinwords< lisp< autoindent< indentkeys< indentexpr<"
line 31: 
line 32: " Only define the function once.
line 33: if exists("*GetRustIndent")
line 34:     finish
line 35: endif
line 36: 
line 37: " vint: -ProhibitAbbreviationOption
line 38: let s:save_cpo = &cpo
line 39: set cpo&vim
line 40: " vint: +ProhibitAbbreviationOption
line 41: 
line 42: " Come here when loading the script the first time.
line 43: 
line 44: function! s:get_line_trimmed(lnum)
line 74: 
line 75: function! s:is_string_comment(lnum, col)
line 88: 
line 89: if exists('*shiftwidth')
line 90:     function! s:shiftwidth()
line 93: else
line 94:     function! s:shiftwidth()
line 97: endif
line 98: 
line 99: function GetRustIndent(lnum)
line 283: 
line 284: " vint: -ProhibitAbbreviationOption
line 285: let &cpo = s:save_cpo
line 286: unlet s:save_cpo
line 287: " vint: +ProhibitAbbreviationOption
line 288: 
line 289: " vim: set et sw=4 sts=4 ts=8:
finished sourcing /usr/share/nvim/runtime/indent/rust.vim
continuing in <SNR>3_LoadIndent
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/rust[.]{vim,lua}"
Searching for "/usr/lib64/nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/indent/rust[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>3_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "rust"
autocommand <Lua 100: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

line 0: sourcing "nvim_exec2() called at FileType Autocommands for "rust":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at FileType Autocommands for "rust":0
continuing in FileType Autocommands for "rust"
line 0: sourcing "nvim_exec2() called at FileType Autocommands for "rust":0"
line 1: augroup END
finished sourcing nvim_exec2() called at FileType Autocommands for "rust":0
continuing in FileType Autocommands for "rust"
line 0: sourcing "nvim_exec2() called at FileType Autocommands for "rust":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at FileType Autocommands for "rust":0
continuing in FileType Autocommands for "rust"
line 0: sourcing "nvim_exec2() called at FileType Autocommands for "rust":0"
line 1: augroup END
finished sourcing nvim_exec2() called at FileType Autocommands for "rust":0
continuing in FileType Autocommands for "rust"
line 0: sourcing "nvim_exec2() called at FileType Autocommands for "rust":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at FileType Autocommands for "rust":0
continuing in FileType Autocommands for "rust"
line 0: sourcing "nvim_exec2() called at FileType Autocommands for "rust":0"
line 1: augroup END
finished sourcing nvim_exec2() called at FileType Autocommands for "rust":0
continuing in FileType Autocommands for "rust"
line 0: sourcing "nvim_exec2() called at FileType Autocommands for "rust":0"
line 1: source /home/boris/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua
line 1: sourcing "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua"
finished sourcing /home/boris/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua
continuing in nvim_exec2() called at FileType Autocommands for "rust":0
finished sourcing nvim_exec2() called at FileType Autocommands for "rust":0
continuing in FileType Autocommands for "rust"
line 0: sourcing "nvim_exec2() called at FileType Autocommands for "rust":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at FileType Autocommands for "rust":0
continuing in FileType Autocommands for "rust"
line 0: sourcing "nvim_exec2() called at FileType Autocommands for "rust":0"
line 1: augroup END
finished sourcing nvim_exec2() called at FileType Autocommands for "rust":0
continuing in FileType Autocommands for "rust"
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>2_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 2:  compiler make | setlocal formatoptions< comments< commentstring< include< includeexpr< suffixesadd<|if exists('b:rust_set_style')|setlocal tabstop< shiftwidth< softtabstop< expandtab< textwidth<|endif|if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustT
line 2: command -nargs=* -keepscript CompilerSet setlocal <args>
Searching for "compiler/make.*" in runtime path
Searching for "/home/boris/.config/nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/compiler/make.*"
Searching for "/usr/share/nvim/runtime/compiler/make.*"
line 2: sourcing "/usr/share/nvim/runtime/compiler/make.vim"
line 1: " Vim compiler plugin
line 2: "
line 3: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>
line 4: " Last Change:^I2024 Sep 10
line 5: " Original Author: Konfekt
line 6: "
line 7: " This compiler plugin is used to reset previously set compiler options.
line 8: 
line 9: if exists("g:current_compiler") | unlet g:current_compiler | endif
line 9:  unlet g:current_compiler | endif
line 9:  endif
line 10: if exists("b:current_compiler") | unlet b:current_compiler | endif
line 10:  unlet b:current_compiler | endif
line 10:  endif
line 11: 
line 12: CompilerSet makeprg&
line 12: setlocal makeprg&
line 13: CompilerSet errorformat&
line 13: setlocal errorformat&
finished sourcing /usr/share/nvim/runtime/compiler/make.vim
continuing in <SNR>2_LoadFTPlugin
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/compiler/make.*"
Searching for "/usr/lib64/nvim/compiler/make.*"
Searching for "/home/boris/.local/state/nvim/lazy/readme/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/compiler/make.*"
line 2: :delcommand CompilerSet
line 2:  setlocal formatoptions< comments< commentstring< include< includeexpr< suffixesadd<|if exists('b:rust_set_style')|setlocal tabstop< shiftwidth< softtabstop< expandtab< textwidth<|endif|if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunm
line 2: if exists('b:rust_set_style')|setlocal tabstop< shiftwidth< softtabstop< expandtab< textwidth<|endif|if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <
line 2: setlocal tabstop< shiftwidth< softtabstop< expandtab< textwidth<|endif|if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buf
line 2: endif|if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet
line 2: if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:mat
line 2: let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild
line 2: unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delco
line 2: else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcomm
line 2: unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -
line 2: endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|d
line 2: if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcomm
line 2: setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buff
line 2: unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Cs
line 2: endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpu
line 2: if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|
line 2: setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcomman
line 2: unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cruntarget
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/rust[.]{vim,lua} ftplugin/rust_*.{vim,lua} ftplugin/rust/*.{vim,lua}
Searching for "ftplugin/rust[.]{vim,lua} ftplugin/rust_*.{vim,lua} ftplugin/rust/*.{vim,lua}" in runtime path
Searching for "/home/boris/.config/nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.config/nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.config/nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust[.]{vim,lua}"
line 20: sourcing "/home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust.vim"
line 1: " Copied from built-in compiler/{rustc,cargo}.vim
line 2: setlocal errorformat=%f:%l:%c:\ %t%*[^:]:\ %m,%f:%l:%c:\ %*\\d:%*\\d\ %t%*[^:]:\ %m,%-G%f:%l\ %s,%-G%*[\ ]^,%-G%*[\ ]^%*[~],%-G%*[\ ]...
line 9: 
line 10: " New errorformat (after nightly 2016/08/10)
line 11: setlocal errorformat+=%-G,%-Gerror:\ aborting\ %.%#,%-Gerror:\ Could\ not\ compile\ %.%#,%Eerror:\ %m,%Eerror[E%n]:\ %m,%Wwarning:\ %m,%Inote:\ %m,%C\ %#-->\ %f:%l:%c
line 20: 
line 21: setlocal errorformat+=%-G%\\s%#Downloading%.%#,%-G%\\s%#Compiling%.%#,%-G%\\s%#Finished%.%#,%-G%\\s%#error:\ Could\ not\ compile\ %.%#,%-G%\\s%#To\ learn\ more\\,%.%#
finished sourcing /home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust.vim
continuing in <SNR>2_LoadFTPlugin
line 20: sourcing "/home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust.lua"
Searching for "lsp/rust-analyzer.lua" in runtime path
Searching for "/home/boris/.config/nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/lsp/rust-analyzer.lua"
Searching for "/usr/share/nvim/runtime/lsp/rust-analyzer.lua"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/lsp/rust-analyzer.lua"
Searching for "/usr/lib64/nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/state/nvim/lazy/readme/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/lsp/rust-analyzer.lua"
not found in runtime path: "lsp/rust-analyzer.lua"
finished sourcing /home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust.lua
continuing in <SNR>2_LoadFTPlugin
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/ftplugin/rust/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/rust[.]{vim,lua}"
line 20: sourcing "/usr/share/nvim/runtime/ftplugin/rust.vim"
line 1: " Language:^IRust
line 2: " Description:^IVim ftplugin for Rust
line 3: " Maintainer:^IChris Morgan <me@chrismorgan.info>
line 4: " Last Change:^I2024 Mar 17
line 5: "^I^I2024 May 23 by Riley Bruins <ribru17@gmail.com ('commentstring')
line 6: " For bugs, patches and license go to https://github.com/rust-lang/rust.vim
line 7: 
line 8: if exists("b:did_ftplugin")
line 9:     finish
line 10: endif
line 11: let b:did_ftplugin = 1
line 12: 
line 13: " vint: -ProhibitAbbreviationOption
line 14: let s:save_cpo = &cpo
line 15: set cpo&vim
line 16: " vint: +ProhibitAbbreviationOption
line 17: 
line 18: if get(b:, 'current_compiler', '') ==# ''
line 19:     if strlen(findfile('Cargo.toml', '.;')) > 0
line 20:         compiler cargo
line 20: command -nargs=* -keepscript CompilerSet setlocal <args>
Searching for "compiler/cargo.*" in runtime path
Searching for "/home/boris/.config/nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/compiler/cargo.*"
Searching for "/usr/share/nvim/runtime/compiler/cargo.*"
line 20: sourcing "/usr/share/nvim/runtime/compiler/cargo.vim"
line 1: " Vim compiler file
line 2: " Compiler:         Cargo Compiler
line 3: " Maintainer:       Damien Radtke <damienradtke@gmail.com>
line 4: " Latest Revision:  2023-09-11
line 5: "                   2024 Apr 05 by The Vim Project (removed :CompilerSet definition)
line 6: " For bugs, patches and license go to https://github.com/rust-lang/rust.vim
line 7: 
line 8: if exists('current_compiler')
line 9:     finish
line 10: endif
line 11: runtime compiler/rustc.vim
Searching for "compiler/rustc.vim" in runtime path
Searching for "/home/boris/.config/nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/compiler/rustc.vim"
Searching for "/usr/share/nvim/runtime/compiler/rustc.vim"
line 11: sourcing "/usr/share/nvim/runtime/compiler/rustc.vim"
line 1: " Vim compiler file
line 2: " Compiler:         Rust Compiler
line 3: " Maintainer:       Chris Morgan <me@chrismorgan.info>
line 4: " Latest Revision:  2023-09-11
line 5: " For bugs, patches and license go to https://github.com/rust-lang/rust.vim
line 6: 
line 7: if exists("current_compiler")
line 8:     finish
line 9: endif
line 10: let current_compiler = "rustc"
line 11: 
line 12: " vint: -ProhibitAbbreviationOption
line 13: let s:save_cpo = &cpo
line 14: set cpo&vim
line 15: " vint: +ProhibitAbbreviationOption
line 16: 
line 17: if get(g:, 'rustc_makeprg_no_percent', 0)
line 18:     CompilerSet makeprg=rustc
line 19: else
line 20:     if has('patch-7.4.191')
line 21:       CompilerSet makeprg=rustc\ \%:S
line 21: setlocal makeprg=rustc\ \%:S
line 22:     else
line 23:       CompilerSet makeprg=rustc\ \"%\"
line 24:     endif
line 25: endif
line 26: 
line 27: " New errorformat (after nightly 2016/08/10)
line 28: CompilerSet errorformat=%-G,%-Gerror:\ aborting\ %.%#,%-Gerror:\ Could\ not\ compile\ %.%#,%Eerror:\ %m,%Eerror[E%n]:\ %m,%Wwarning:\ %m,%Inote:\ %m,%C\ %#-->\ %f:%l:%c,%E\ \ left:%m,%C\ right:%m\ %f:%l:%c,%Z
line 28: setlocal errorformat=%-G,%-Gerror:\ aborting\ %.%#,%-Gerror:\ Could\ not\ compile\ %.%#,%Eerror:\ %m,%Eerror[E%n]:\ %m,%Wwarning:\ %m,%Inote:\ %m,%C\ %#-->\ %f:%l:%c,%E\ \ left:%m,%C\ right:%m\ %f:%l:%c,%Z
line 38: 
line 39: " Old errorformat (before nightly 2016/08/10)
line 40: CompilerSet errorformat+=%f:%l:%c:\ %t%*[^:]:\ %m,%f:%l:%c:\ %*\\d:%*\\d\ %t%*[^:]:\ %m,%-G%f:%l\ %s,%-G%*[\ ]^,%-G%*[\ ]^%*[~],%-G%*[\ ]...
line 40: setlocal errorformat+=%f:%l:%c:\ %t%*[^:]:\ %m,%f:%l:%c:\ %*\\d:%*\\d\ %t%*[^:]:\ %m,%-G%f:%l\ %s,%-G%*[\ ]^,%-G%*[\ ]^%*[~],%-G%*[\ ]...
line 47: 
line 48: " vint: -ProhibitAbbreviationOption
line 49: let &cpo = s:save_cpo
line 50: unlet s:save_cpo
line 51: " vint: +ProhibitAbbreviationOption
line 52: 
line 53: " vim: set et sw=4 sts=4 ts=8:
finished sourcing /usr/share/nvim/runtime/compiler/rustc.vim
continuing in /usr/share/nvim/runtime/compiler/cargo.vim
line 12: let current_compiler = "cargo"
line 13: 
line 14: " vint: -ProhibitAbbreviationOption
line 15: let s:save_cpo = &cpo
line 16: set cpo&vim
line 17: " vint: +ProhibitAbbreviationOption
line 18: 
line 19: if exists('g:cargo_makeprg_params')
line 20:     execute 'CompilerSet makeprg=cargo\ '.escape(g:cargo_makeprg_params, ' \|"').'\ $*'
line 21: else
line 22:     CompilerSet makeprg=cargo\ $*
line 22: setlocal makeprg=cargo\ $*
line 23: endif
line 24: 
line 25: augroup RustCargoQuickFixHooks
line 26:     autocmd!
line 27:     autocmd QuickFixCmdPre make call cargo#quickfix#CmdPre()
line 28:     autocmd QuickFixCmdPost make call cargo#quickfix#CmdPost()
line 29: augroup END
line 30: 
line 31: " Ignore general cargo progress messages
line 32: CompilerSet errorformat+=%-G%\\s%#Downloading%.%#,%-G%\\s%#Checking%.%#,%-G%\\s%#Compiling%.%#,%-G%\\s%#Finished%.%#,%-G%\\s%#error:\ Could\ not\ compile\ %.%#,%-G%\\s%#To\ learn\ more\\,%.%#,%-G%\\s%#For\ more\ information\ about\ this\ error\\,%.%#,%-Gnote:\ Run\ with\ \`RUST_BACKTRACE=%.%#,%.%#panicked\ at\ \\'%m\\'\\,\ %f:%l:%c
line 32: setlocal errorformat+=%-G%\\s%#Downloading%.%#,%-G%\\s%#Checking%.%#,%-G%\\s%#Compiling%.%#,%-G%\\s%#Finished%.%#,%-G%\\s%#error:\ Could\ not\ compile\ %.%#,%-G%\\s%#To\ learn\ more\\,%.%#,%-G%\\s%#For\ more\ information\ about\ this\ error\\,%.%#,%-Gnote:\ Run\ with\ \`RUST_BACKTRACE=%.%#,%.%#panicked\ at\ \\'%m\\'\\,\ %f:%l:%c
line 42: 
line 43: " vint: -ProhibitAbbreviationOption
line 44: let &cpo = s:save_cpo
line 45: unlet s:save_cpo
line 46: " vint: +ProhibitAbbreviationOption
line 47: 
line 48: " vim: set et sw=4 sts=4 ts=8:
finished sourcing /usr/share/nvim/runtime/compiler/cargo.vim
continuing in /usr/share/nvim/runtime/ftplugin/rust.vim
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/compiler/cargo.*"
Searching for "/usr/lib64/nvim/compiler/cargo.*"
Searching for "/home/boris/.local/state/nvim/lazy/readme/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/compiler/cargo.*"
line 20: :delcommand CompilerSet
line 21:     else
line 22:         compiler rustc
line 23:     endif
line 24: endif
line 25: 
line 26: " Variables {{{1
line 27: 
line 28: " The rust source code at present seems to typically omit a leader on /*!
line 29: " comments, so we'll use that as our default, but make it easy to switch.
line 30: " This does not affect indentation at all (I tested it with and without
line 31: " leader), merely whether a leader is inserted by default or not.
line 32: if get(g:, 'rust_bang_comment_leader', 0)
line 33:     " Why is the `,s0:/*,mb:\ ,ex:*/` there, you ask? I don't understand why,
line 34:     " but without it, */ gets indented one space even if there were no
line 35:     " leaders. I'm fairly sure that's a Vim bug.
line 36:     setlocal comments=s1:/*,mb:*,ex:*/,s0:/*,mb:\ ,ex:*/,:///,://!,://
line 37: else
line 38:     setlocal comments=s0:/*!,ex:*/,s1:/*,mb:*,ex:*/,:///,://!,://
line 39: endif
line 40: setlocal commentstring=//\ %s
line 41: setlocal formatoptions-=t formatoptions+=croqnl
line 42: " j was only added in 7.3.541, so stop complaints about its nonexistence
line 43: silent! setlocal formatoptions+=j
line 44: 
line 45: " smartindent will be overridden by indentexpr if filetype indent is on, but
line 46: " otherwise it's better than nothing.
line 47: setlocal smartindent nocindent
line 48: 
line 49: if get(g:, 'rust_recommended_style', 1)
line 50:     let b:rust_set_style = 1
line 51:     setlocal shiftwidth=4 softtabstop=4 expandtab
line 52:     setlocal textwidth=99
line 53: endif
line 54: 
line 55: setlocal include=\\v^\\s*(pub\\s+)?use\\s+\\zs(\\f\|:)+
line 56: setlocal includeexpr=rust#IncludeExpr(v:fname)
line 57: 
line 58: setlocal suffixesadd=.rs
line 59: 
line 60: if exists("g:ftplugin_rust_source_path")
line 61:     let &l:path=g:ftplugin_rust_source_path . ',' . &l:path
line 62: endif
line 63: 
line 64: if exists("g:loaded_delimitMate")
line 65:     if exists("b:delimitMate_excluded_regions")
line 66:         let b:rust_original_delimitMate_excluded_regions = b:delimitMate_excluded_regions
line 67:     endif
line 68: 
line 69:     augroup rust.vim.DelimitMate
line 70:         autocmd!
line 71: 
line 72:         autocmd User delimitMate_map   :call rust#delimitmate#onMap()
line 73:         autocmd User delimitMate_unmap :call rust#delimitmate#onUnmap()
line 74:     augroup END
line 75: endif
line 76: 
line 77: " Integration with auto-pairs (https://github.com/jiangmiao/auto-pairs)
line 78: if exists("g:AutoPairsLoaded") && !get(g:, 'rust_keep_autopairs_default', 0)
line 79:     let b:AutoPairs = {'(':')', '[':']', '{':'}','"':'"', '`':'`'}
line 80: endif
line 81: 
line 82: if has("folding") && get(g:, 'rust_fold', 0)
line 83:     let b:rust_set_foldmethod=1
line 84:     setlocal foldmethod=syntax
line 85:     if g:rust_fold == 2
line 86:         setlocal foldlevel<
line 87:     else
line 88:         setlocal foldlevel=99
line 89:     endif
line 90: endif
line 91: 
line 92: if has('conceal') && get(g:, 'rust_conceal', 0)
line 93:     let b:rust_set_conceallevel=1
line 94:     setlocal conceallevel=2
line 95: endif
line 96: 
line 97: " Motion Commands {{{1
line 98: if !exists("g:no_plugin_maps") && !exists("g:no_rust_maps")
line 99:     " Bind motion commands to support hanging indents
line 100:     nnoremap <silent> <buffer> [[ :call rust#Jump('n', 'Back')<CR>
line 101:     nnoremap <silent> <buffer> ]] :call rust#Jump('n', 'Forward')<CR>
line 102:     xnoremap <silent> <buffer> [[ :call rust#Jump('v', 'Back')<CR>
line 103:     xnoremap <silent> <buffer> ]] :call rust#Jump('v', 'Forward')<CR>
line 104:     onoremap <silent> <buffer> [[ :call rust#Jump('o', 'Back')<CR>
line 105:     onoremap <silent> <buffer> ]] :call rust#Jump('o', 'Forward')<CR>
line 106: endif
line 107: 
line 108: " Commands {{{1
line 109: 
line 110: " See |:RustRun| for docs
line 111: command! -nargs=* -complete=file -bang -buffer RustRun call rust#Run(<bang>0, <q-args>)
line 112: 
line 113: " See |:RustExpand| for docs
line 114: command! -nargs=* -complete=customlist,rust#CompleteExpand -bang -buffer RustExpand call rust#Expand(<bang>0, <q-args>)
line 115: 
line 116: " See |:RustEmitIr| for docs
line 117: command! -nargs=* -buffer RustEmitIr call rust#Emit("llvm-ir", <q-args>)
line 118: 
line 119: " See |:RustEmitAsm| for docs
line 120: command! -nargs=* -buffer RustEmitAsm call rust#Emit("asm", <q-args>)
line 121: 
line 122: " See |:RustPlay| for docs
line 123: command! -range=% -buffer RustPlay :call rust#Play(<count>, <line1>, <line2>, <f-args>)
line 124: 
line 125: " See |:RustFmt| for docs
line 126: command! -bar -buffer RustFmt call rustfmt#Format()
line 127: 
line 128: " See |:RustFmtRange| for docs
line 129: command! -range -buffer RustFmtRange call rustfmt#FormatRange(<line1>, <line2>)
line 130: 
line 131: " See |:RustInfo| for docs
line 132: command! -bar -buffer RustInfo call rust#debugging#Info()
line 133: 
line 134: " See |:RustInfoToClipboard| for docs
line 135: command! -bar -buffer RustInfoToClipboard call rust#debugging#InfoToClipboard()
line 136: 
line 137: " See |:RustInfoToFile| for docs
line 138: command! -bar -nargs=1 -buffer RustInfoToFile call rust#debugging#InfoToFile(<f-args>)
line 139: 
line 140: " See |:RustTest| for docs
line 141: command! -buffer -nargs=* -count -bang RustTest call rust#Test(<q-mods>, <count>, <bang>0, <q-args>)
line 142: 
line 143: if !exists("b:rust_last_rustc_args") || !exists("b:rust_last_args")
line 144:     let b:rust_last_rustc_args = []
line 145:     let b:rust_last_args = []
line 146: endif
line 147: 
line 148: " Cleanup {{{1
line 149: 
line 150: let b:undo_ftplugin = " compiler make | setlocal formatoptions< comments< commentstring< include< includeexpr< suffixesadd<|if exists('b:rust_set_style')|setlocal tabstop< shiftwidth< softtabstop< expandtab< textwidth<|endif|if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile
line 191: 
line 192: " }}}1
line 193: 
line 194: " Code formatting on save
line 195: augroup rust.vim.PreWrite
line 196:     autocmd!
line 197:     autocmd BufWritePre *.rs silent! call rustfmt#PreWrite()
line 198: augroup END
line 199: 
line 200: setlocal matchpairs+=<:>
line 201: " For matchit.vim (rustArrow stops `Fn() -> X` messing things up)
line 202: let b:match_skip = 's:comment\|string\|rustCharacter\|rustArrow'
line 203: 
line 204: command! -buffer -nargs=+ Cargo call cargo#cmd(<q-args>)
line 205: command! -buffer -nargs=* Cbuild call cargo#build(<q-args>)
line 206: command! -buffer -nargs=* Ccheck call cargo#check(<q-args>)
line 207: command! -buffer -nargs=* Cclean call cargo#clean(<q-args>)
line 208: command! -buffer -nargs=* Cdoc call cargo#doc(<q-args>)
line 209: command! -buffer -nargs=+ Cnew call cargo#new(<q-args>)
line 210: command! -buffer -nargs=* Cinit call cargo#init(<q-args>)
line 211: command! -buffer -nargs=* Crun call cargo#run(<q-args>)
line 212: command! -buffer -nargs=* Ctest call cargo#test(<q-args>)
line 213: command! -buffer -nargs=* Cbench call cargo#bench(<q-args>)
line 214: command! -buffer -nargs=* Cupdate call cargo#update(<q-args>)
line 215: command! -buffer -nargs=* Csearch  call cargo#search(<q-args>)
line 216: command! -buffer -nargs=* Cpublish call cargo#publish(<q-args>)
line 217: command! -buffer -nargs=* Cinstall call cargo#install(<q-args>)
line 218: command! -buffer -nargs=* Cruntarget call cargo#runtarget(<q-args>)
line 219: 
line 220: let b:undo_ftplugin .= '|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget'
line 236: 
line 237: " vint: -ProhibitAbbreviationOption
line 238: let &cpo = s:save_cpo
line 239: unlet s:save_cpo
line 240: " vint: +ProhibitAbbreviationOption
line 241: 
line 242: " vim: set et sw=4 sts=4 ts=8:
finished sourcing /usr/share/nvim/runtime/ftplugin/rust.vim
continuing in <SNR>2_LoadFTPlugin
Searching for "/usr/share/nvim/runtime/ftplugin/rust_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/rust/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/rust[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/rust_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/rust/*.{vim,lua}"
Searching for "/usr/lib64/nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/usr/lib64/nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/usr/lib64/nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/ftplugin/rust/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>2_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>3_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 2: setlocal cindent< cinoptions< cinkeys< cinwords< lisp< autoindent< indentkeys< indentexpr<
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/rust[.]{vim,lua}
Searching for "indent/rust[.]{vim,lua}" in runtime path
Searching for "/home/boris/.config/nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/indent/rust[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/rust[.]{vim,lua}"
line 15: sourcing "/usr/share/nvim/runtime/indent/rust.vim"
line 1: " Vim indent file
line 2: " Language:         Rust
line 3: " Author:           Chris Morgan <me@chrismorgan.info>
line 4: " Last Change:      2023-09-11
line 5: " 2024 Jul 04 by Vim Project: use shiftwidth() instead of hard-coding shifted values (#15138)
line 6: 
line 7: " For bugs, patches and license go to https://github.com/rust-lang/rust.vim
line 8: " Note: upstream seems umaintained: https://github.com/rust-lang/rust.vim/issues/502
line 9: 
line 10: " Only load this indent file when no other was loaded.
line 11: if exists("b:did_indent")
line 12:     finish
line 13: endif
line 14: let b:did_indent = 1
line 15: 
line 16: setlocal cindent
line 17: setlocal cinoptions=L0,(s,Ws,J1,j1,m1
line 18: setlocal cinkeys=0{,0},!^F,o,O,0[,0],0(,0)
line 19: " Don't think cinwords will actually do anything at all... never mind
line 20: setlocal cinwords=for,if,else,while,loop,impl,mod,unsafe,trait,struct,enum,fn,extern,macro
line 21: 
line 22: " Some preliminary settings
line 23: setlocal nolisp^I^I" Make sure lisp indenting doesn't supersede us
line 24: setlocal autoindent^I" indentexpr isn't much help otherwise
line 25: " Also do indentkeys, otherwise # gets shoved to column 0 :-/
line 26: setlocal indentkeys=0{,0},!^F,o,O,0[,0],0(,0)
line 27: 
line 28: setlocal indentexpr=GetRustIndent(v:lnum)
line 29: 
line 30: let b:undo_indent = "setlocal cindent< cinoptions< cinkeys< cinwords< lisp< autoindent< indentkeys< indentexpr<"
line 31: 
line 32: " Only define the function once.
line 33: if exists("*GetRustIndent")
line 34:     finish
finished sourcing /usr/share/nvim/runtime/indent/rust.vim
continuing in <SNR>3_LoadIndent
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/rust[.]{vim,lua}"
Searching for "/usr/lib64/nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/indent/rust[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>3_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand <Lua 365: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:123>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 396: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:633>

Executing: 
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand <Lua 431: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/init.lua:28>

Searching for "parser/rust.*" in runtime path
Searching for "/home/boris/.config/nvim/parser/rust.*"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/parser/rust.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/parser/rust.*"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/parser/rust.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/parser/rust.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/parser/rust.*"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/parser/rust.*"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/parser/rust.*"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/parser/rust.*"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/parser/rust.*"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/parser/rust.*"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/parser/rust.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/parser/rust.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/parser/rust.*"
Searching for "queries/rust/injections.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/injections.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/injections.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/injections.scm"
Searching for "/usr/lib64/nvim/queries/rust/injections.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/injections.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/injections.scm"
Searching for "queries/rust/folds.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/folds.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/folds.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/folds.scm"
Searching for "/usr/lib64/nvim/queries/rust/folds.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/folds.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/folds.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 147: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/rust/indents.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/indents.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/indents.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/indents.scm"
Searching for "/usr/lib64/nvim/queries/rust/indents.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/indents.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/indents.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 144: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/rust/highlights.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/highlights.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/highlights.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/highlights.scm"
Searching for "/usr/lib64/nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/highlights.scm"
Searching for "queries/rust/highlights.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/highlights.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/highlights.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/highlights.scm"
Searching for "/usr/lib64/nvim/queries/rust/highlights.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/highlights.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/highlights.scm"
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling <SNR>51_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   0verbose let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 26:         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
line 27:       endif
line 28:     endfor
line 29:   endif
<SNR>51_SynSet returning #0

continuing in Syntax Autocommands for "*"

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 145: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/rust/textobjects.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/textobjects.scm"
Searching for "/usr/lib64/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/textobjects.scm"
Searching for "queries/rust/textobjects.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/textobjects.scm"
Searching for "/usr/lib64/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/textobjects.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 142: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/rust/textobjects.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/textobjects.scm"
Searching for "/usr/lib64/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/textobjects.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 143: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/rust/textobjects.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/textobjects.scm"
Searching for "/usr/lib64/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/textobjects.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 140: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 365: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:123>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 396: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:633>

Executing: 
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand <Lua 431: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/init.lua:28>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 147: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 144: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling <SNR>51_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   0verbose let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 26:         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
line 27:       endif
line 28:     endfor
line 29:   endif
<SNR>51_SynSet returning #0

continuing in Syntax Autocommands for "*"

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 145: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/rust/textobjects.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/textobjects.scm"
Searching for "/usr/lib64/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/textobjects.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 142: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/rust/textobjects.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/textobjects.scm"
Searching for "/usr/lib64/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/textobjects.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 143: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/rust/textobjects.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/textobjects.scm"
Searching for "/usr/lib64/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/textobjects.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 140: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing: 
autocommand if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing: if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif
Executing:  runtime! scripts.vim | endif
Executing:  endif
Executing BufReadPost Autocommands for "*"
autocommand <Lua 371: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/guess-indent.lua:13>

line 0: sourcing "nvim_exec2() called at BufReadPost Autocommands for "*":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at BufReadPost Autocommands for "*":0
continuing in BufReadPost Autocommands for "*"
line 0: sourcing "nvim_exec2() called at BufReadPost Autocommands for "*":0"
line 1: augroup END
finished sourcing nvim_exec2() called at BufReadPost Autocommands for "*":0
continuing in BufReadPost Autocommands for "*"
File type: rust
Buffer type: 
Guess Indent
Lines using tabs: 0
Lines using spaces: 2
Relative Indentation
  4 spaces: 2
Absolute Indentation
  4 spaces: 2
Lines loaded: 10
Lines iterated: 10
Spaces Scoring
  4 score: 1.8613531161468
Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 382: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:236>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 383: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:135>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 393: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:607>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 205: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/init.lua:187>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 526: /usr/share/nvim/runtime/plugin/editorconfig.lua:4>

Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 566: ~/.local/share/nvim/lazy/which-key.nvim/lua/which-key/state.lua:135>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 375: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:60>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 387: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:29>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 397: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:633>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand <Lua 402: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:665>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand lua package.loaded.presence:handle_buf_enter()

Executing: lua package.loaded.presence:handle_buf_enter()
Executing BufEnter Autocommands for "*"
autocommand <Lua 568: ~/.local/share/nvim/lazy/which-key.nvim/lua/which-key/state.lua:145>

Executing: 
Executing BufEnter Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_buffer_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_buffer_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 366: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:202>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 437: ~/.local/share/nvim/lazy/nvim-dap-ui/lua/dapui/windows/init.lua:107>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand autocmd SafeState * ++once call s:Highlight_Matching_Pair()

Executing: autocmd SafeState * ++once call s:Highlight_Matching_Pair()
Executing BufWinEnter Autocommands for "*"
autocommand <Lua 430: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/init.lua:28>

Executing: 
Executing BufWinEnter Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_buffer_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_buffer_enter', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
line 1: unlet! b:keymap_name
finished sourcing nvim_exec2()
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
line 33:     endif
line 34:   endif
line 35: 
line 36:   " Figure out the arguments for searchpairpos().
line 37:   if i % 2 == 0
line 38:     let s_flags = 'nW'
line 39:     let c2 = plist[i + 1]
line 40:   else
line 41:     let s_flags = 'nbW'
line 42:     let c2 = c
line 43:     let c = plist[i - 1]
line 44:   endif
line 45:   if c == '['
line 46:     let c = '\['
line 47:     let c2 = '\]'
line 48:   endif
line 49: 
line 50:   " Find the match.  When it was just before the cursor move it there for a
line 51:   " moment.
line 52:   if before > 0
line 53:     let save_cursor = getcurpos()
line 54:     call cursor(c_lnum, c_col - before)
line 55:     defer setpos('.', save_cursor)
line 56:   endif
line 57: 
line 58:   if !has("syntax") || !exists("g:syntax_on")
line 59:     let s_skip = "0"
line 60:   elseif exists("b:ts_highlight") && &syntax != 'on'
line 61:     let s_skip = "match(v:lua.vim.treesitter.get_captures_at_cursor(), '" .. 'string\|character\|singlequote\|escape\|symbol\|comment' .. "') != -1"
line 64:   else
line 65:     " do not attempt to match when the syntax item where the cursor is
line 66:     " indicates there does not exist a matching parenthesis, e.g. for shells
line 67:     " case statement: "case $var in foobar)"
line 68:     "
line 69:     " add the check behind a filetype check, so it only needs to be
line 70:     " evaluated for certain filetypes
line 71:     if ['sh']->index(&filetype) >= 0 && synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "shSnglCase"}) >= 0
line 74:       return
line 75:     endif
line 76:     " Build an expression that detects whether the current cursor position is
line 77:     " in certain syntax types (string, comment, etc.), for use as
line 78:     " searchpairpos()'s skip argument.
line 79:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 80:     " match "symbol" for lispBarSymbol.
line 81:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 84:     " If executing the expression determines that the cursor is currently in
line 85:     " one of the syntax types, then we want searchpairpos() to find the pair
line 86:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 87:     " outside of the syntax types and s_skip should keep its value so we skip
line 88:     " any matching pair inside the syntax types.
line 89:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 90:     try
line 91:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 92:     catch /^Vim\%((\a\+)\)\=:E363/
line 93:       " We won't find anything, so skip searching, should keep Vim responsive.
line 94:       return
line 95:     endtry
line 96:   endif
line 97: 
line 98:   " Limit the search to lines visible in the window.
line 99:   let stoplinebottom = line('w$')
line 100:   let stoplinetop = line('w0')
line 101:   if i % 2 == 0
line 102:     let stopline = stoplinebottom
line 103:   else
line 104:     let stopline = stoplinetop
line 105:   endif
line 106: 
line 107:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 108:   " This fails when a timeout is not supported.
line 109:   if mode() == 'i' || mode() == 'R'
line 110:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 111:   else
line 112:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 113:   endif
line 114:   try
line 115:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 116:   catch /E118/
line 117:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 118:     " a long time on closed folds and long lines.
line 119:     " The "viewable" variables give a range in which we can scroll while
line 120:     " keeping the cursor at the same position.
line 121:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 122:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 123:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 124:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 125:     " one of these stoplines will be adjusted below, but the current values are
line 126:     " minimal boundaries within the current window
line 127:     if i % 2 == 0
line 128:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 129: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 130: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 131:       else
line 132: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 133:       endif
line 134:       let stoplinebottom = stopline
line 135:     else
line 136:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 137: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 138: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 139:       else
line 140: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 141:       endif
line 142:       let stoplinetop = stopline
line 143:     endif
line 144:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 145:   endtry
line 146: 
line 147:   " If a match is found setup match highlighting.
line 148:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom
line 149:     if !g:matchparen_disable_cursor_hl
line 150:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 151:     else
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[m_lnum, m_col]], 10))
line 153:     endif
line 154:     let w:paren_hl_on = 1
line 155:   endif
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1397: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/scope.lua:675>

Executing: 
Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
line 33:     endif
line 34:   endif
line 35: 
line 36:   " Figure out the arguments for searchpairpos().
line 37:   if i % 2 == 0
line 38:     let s_flags = 'nW'
line 39:     let c2 = plist[i + 1]
line 40:   else
line 41:     let s_flags = 'nbW'
line 42:     let c2 = c
line 43:     let c = plist[i - 1]
line 44:   endif
line 45:   if c == '['
line 46:     let c = '\['
line 47:     let c2 = '\]'
line 48:   endif
line 49: 
line 50:   " Find the match.  When it was just before the cursor move it there for a
line 51:   " moment.
line 52:   if before > 0
line 53:     let save_cursor = getcurpos()
line 54:     call cursor(c_lnum, c_col - before)
line 55:     defer setpos('.', save_cursor)
line 56:   endif
line 57: 
line 58:   if !has("syntax") || !exists("g:syntax_on")
line 59:     let s_skip = "0"
line 60:   elseif exists("b:ts_highlight") && &syntax != 'on'
line 61:     let s_skip = "match(v:lua.vim.treesitter.get_captures_at_cursor(), '" .. 'string\|character\|singlequote\|escape\|symbol\|comment' .. "') != -1"
line 64:   else
line 65:     " do not attempt to match when the syntax item where the cursor is
line 66:     " indicates there does not exist a matching parenthesis, e.g. for shells
line 67:     " case statement: "case $var in foobar)"
line 68:     "
line 69:     " add the check behind a filetype check, so it only needs to be
line 70:     " evaluated for certain filetypes
line 71:     if ['sh']->index(&filetype) >= 0 && synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "shSnglCase"}) >= 0
line 74:       return
line 75:     endif
line 76:     " Build an expression that detects whether the current cursor position is
line 77:     " in certain syntax types (string, comment, etc.), for use as
line 78:     " searchpairpos()'s skip argument.
line 79:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 80:     " match "symbol" for lispBarSymbol.
line 81:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 84:     " If executing the expression determines that the cursor is currently in
line 85:     " one of the syntax types, then we want searchpairpos() to find the pair
line 86:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 87:     " outside of the syntax types and s_skip should keep its value so we skip
line 88:     " any matching pair inside the syntax types.
line 89:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 90:     try
line 91:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 92:     catch /^Vim\%((\a\+)\)\=:E363/
line 93:       " We won't find anything, so skip searching, should keep Vim responsive.
line 94:       return
line 95:     endtry
line 96:   endif
line 97: 
line 98:   " Limit the search to lines visible in the window.
line 99:   let stoplinebottom = line('w$')
line 100:   let stoplinetop = line('w0')
line 101:   if i % 2 == 0
line 102:     let stopline = stoplinebottom
line 103:   else
line 104:     let stopline = stoplinetop
line 105:   endif
line 106: 
line 107:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 108:   " This fails when a timeout is not supported.
line 109:   if mode() == 'i' || mode() == 'R'
line 110:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 111:   else
line 112:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 113:   endif
line 114:   try
line 115:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 116:   catch /E118/
line 117:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 118:     " a long time on closed folds and long lines.
line 119:     " The "viewable" variables give a range in which we can scroll while
line 120:     " keeping the cursor at the same position.
line 121:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 122:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 123:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 124:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 125:     " one of these stoplines will be adjusted below, but the current values are
line 126:     " minimal boundaries within the current window
line 127:     if i % 2 == 0
line 128:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 129: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 130: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 131:       else
line 132: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 133:       endif
line 134:       let stoplinebottom = stopline
line 135:     else
line 136:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 137: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 138: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 139:       else
line 140: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 141:       endif
line 142:       let stoplinetop = stopline
line 143:     endif
line 144:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 145:   endtry
line 146: 
line 147:   " If a match is found setup match highlighting.
line 148:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom
line 149:     if !g:matchparen_disable_cursor_hl
line 150:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 151:     else
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[m_lnum, m_col]], 10))
line 153:     endif
line 154:     let w:paren_hl_on = 1
line 155:   endif
<SNR>41_Highlight_Matching_Pair returning #0

continuing in WinScrolled Autocommands for "*"

Executing SafeState Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
line 33:     endif
line 34:   endif
line 35: 
line 36:   " Figure out the arguments for searchpairpos().
line 37:   if i % 2 == 0
line 38:     let s_flags = 'nW'
line 39:     let c2 = plist[i + 1]
line 40:   else
line 41:     let s_flags = 'nbW'
line 42:     let c2 = c
line 43:     let c = plist[i - 1]
line 44:   endif
line 45:   if c == '['
line 46:     let c = '\['
line 47:     let c2 = '\]'
line 48:   endif
line 49: 
line 50:   " Find the match.  When it was just before the cursor move it there for a
line 51:   " moment.
line 52:   if before > 0
line 53:     let save_cursor = getcurpos()
line 54:     call cursor(c_lnum, c_col - before)
line 55:     defer setpos('.', save_cursor)
line 56:   endif
line 57: 
line 58:   if !has("syntax") || !exists("g:syntax_on")
line 59:     let s_skip = "0"
line 60:   elseif exists("b:ts_highlight") && &syntax != 'on'
line 61:     let s_skip = "match(v:lua.vim.treesitter.get_captures_at_cursor(), '" .. 'string\|character\|singlequote\|escape\|symbol\|comment' .. "') != -1"
line 64:   else
line 65:     " do not attempt to match when the syntax item where the cursor is
line 66:     " indicates there does not exist a matching parenthesis, e.g. for shells
line 67:     " case statement: "case $var in foobar)"
line 68:     "
line 69:     " add the check behind a filetype check, so it only needs to be
line 70:     " evaluated for certain filetypes
line 71:     if ['sh']->index(&filetype) >= 0 && synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "shSnglCase"}) >= 0
line 74:       return
line 75:     endif
line 76:     " Build an expression that detects whether the current cursor position is
line 77:     " in certain syntax types (string, comment, etc.), for use as
line 78:     " searchpairpos()'s skip argument.
line 79:     " We match "escape" for special items, such as lispEscapeSpecial, and
line 80:     " match "symbol" for lispBarSymbol.
line 81:     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
line 84:     " If executing the expression determines that the cursor is currently in
line 85:     " one of the syntax types, then we want searchpairpos() to find the pair
line 86:     " within those syntax types (i.e., not skip).  Otherwise, the cursor is
line 87:     " outside of the syntax types and s_skip should keep its value so we skip
line 88:     " any matching pair inside the syntax types.
line 89:     " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
line 90:     try
line 91:       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
line 92:     catch /^Vim\%((\a\+)\)\=:E363/
line 93:       " We won't find anything, so skip searching, should keep Vim responsive.
line 94:       return
line 95:     endtry
line 96:   endif
line 97: 
line 98:   " Limit the search to lines visible in the window.
line 99:   let stoplinebottom = line('w$')
line 100:   let stoplinetop = line('w0')
line 101:   if i % 2 == 0
line 102:     let stopline = stoplinebottom
line 103:   else
line 104:     let stopline = stoplinetop
line 105:   endif
line 106: 
line 107:   " Limit the search time to 300 msec to avoid a hang on very long lines.
line 108:   " This fails when a timeout is not supported.
line 109:   if mode() == 'i' || mode() == 'R'
line 110:     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
line 111:   else
line 112:     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
line 113:   endif
line 114:   try
line 115:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
line 116:   catch /E118/
line 117:     " Can't use the timeout, restrict the stopline a bit more to avoid taking
line 118:     " a long time on closed folds and long lines.
line 119:     " The "viewable" variables give a range in which we can scroll while
line 120:     " keeping the cursor at the same position.
line 121:     " adjustedScrolloff accounts for very large numbers of scrolloff.
line 122:     let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
line 123:     let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
line 124:     let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
line 125:     " one of these stoplines will be adjusted below, but the current values are
line 126:     " minimal boundaries within the current window
line 127:     if i % 2 == 0
line 128:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 129: ^Ilet stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
line 130: ^Ilet stopline = min([bottom_viewable, byte2line(stopbyte)])
line 131:       else
line 132: ^Ilet stopline = min([bottom_viewable, c_lnum + 100])
line 133:       endif
line 134:       let stoplinebottom = stopline
line 135:     else
line 136:       if has("byte_offset") && has("syntax_items") && &smc > 0
line 137: ^Ilet stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
line 138: ^Ilet stopline = max([top_viewable, byte2line(stopbyte)])
line 139:       else
line 140: ^Ilet stopline = max([top_viewable, c_lnum - 100])
line 141:       endif
line 142:       let stoplinetop = stopline
line 143:     endif
line 144:     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
line 145:   endtry
line 146: 
line 147:   " If a match is found setup match highlighting.
line 148:   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom
line 149:     if !g:matchparen_disable_cursor_hl
line 150:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
line 151:     else
line 152:       call add(w:matchparen_ids, matchaddpos('MatchParen', [[m_lnum, m_col]], 10))
line 153:     endif
line 154:     let w:paren_hl_on = 1
line 155:   endif
<SNR>41_Highlight_Matching_Pair returning #0

continuing in SafeState Autocommands for "*"

Executing command: "'/bin/zsh' '-c' 'cd "/home/boris/projects/personal-projects/monkdb/src" && git rev-parse --show-toplevel'"


Executing command: "'/bin/zsh' '-c' 'cd "/home/boris/projects/personal-projects/monkdb/src" && git config --get remote.origin.url'"


Executing command: "'/usr/bin/git' '-C' '/home/boris/projects/personal-projects/monkdb/src' 'rev-parse'"


Executing User Autocommands for "AstroFile"
autocommand <Lua 98: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: source /home/boris/.local/share/nvim/lazy/vim-illuminate/plugin/illuminate.vim
line 1: sourcing "/home/boris/.local/share/nvim/lazy/vim-illuminate/plugin/illuminate.vim"
line 1: " illuminate.vim - Vim plugin for selectively illuminating other uses of current word
line 2: " Maintainer:^IAdam P. Regasz-Rethy (RRethy) <rethy.spud@gmail.com>
line 3: " Version: 2.0
line 4: 
line 5: if exists('g:loaded_illuminate')
line 6:   finish
line 7: endif
line 8: 
line 9: let g:loaded_illuminate = 1
line 10: 
line 11: if has('nvim-0.7.2') && get(g:, 'Illuminate_useDeprecated', 0) != 1
line 12: lua << EOF
line 51: 
line 52: lua require('illuminate').set_highlight_defaults()
line 52: sourcing "nvim_exec2() called at /home/boris/.local/share/nvim/lazy/vim-illuminate/plugin/illuminate.vim:52"
line 1:     hi def IlluminatedWordText guifg=none guibg=none gui=underline
line 2:     hi def IlluminatedWordRead guifg=none guibg=none gui=underline
line 3:     hi def IlluminatedWordWrite guifg=none guibg=none gui=underline
line 4:     
finished sourcing nvim_exec2() called at /home/boris/.local/share/nvim/lazy/vim-illuminate/plugin/illuminate.vim:52
continuing in /home/boris/.local/share/nvim/lazy/vim-illuminate/plugin/illuminate.vim
line 53: augroup vim_illuminate_autocmds
line 54:     autocmd!
line 55:     autocmd ColorScheme * lua require('illuminate').set_highlight_defaults()
line 56: augroup END
line 57: 
line 58: finish
finished sourcing /home/boris/.local/share/nvim/lazy/vim-illuminate/plugin/illuminate.vim
continuing in nvim_exec2() called at User Autocommands for "AstroFile":0
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: source /home/boris/.local/share/nvim/lazy/nvim-ts-autotag/plugin/nvim-ts-autotag.lua
line 1: sourcing "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/plugin/nvim-ts-autotag.lua"
finished sourcing /home/boris/.local/share/nvim/lazy/nvim-ts-autotag/plugin/nvim-ts-autotag.lua
continuing in nvim_exec2() called at User Autocommands for "AstroFile":0
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: source /home/boris/.local/share/nvim/lazy/todo-comments.nvim/plugin/todo.vim
line 1: sourcing "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/plugin/todo.vim"
line 1: command! -nargs=* TodoQuickFix lua require("todo-comments.search").setqflist(<q-args>)
line 2: command! -nargs=* TodoLocList lua require("todo-comments.search").setloclist(<q-args>)
line 3: command! -nargs=* TodoTelescope Telescope todo-comments todo <args>
line 4: command! -nargs=* TodoFzfLua lua require("todo-comments.fzf").todo() <args>
line 5: command! -nargs=* TodoTrouble Trouble todo <args>
finished sourcing /home/boris/.local/share/nvim/lazy/todo-comments.nvim/plugin/todo.vim
continuing in nvim_exec2() called at User Autocommands for "AstroFile":0
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoBgWARN guibg=#d09214 guifg=#1a1d23 gui=BOLD
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoFgWARN guibg=NONE guifg=#d09214 gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoSignWARN guibg=NONE guifg=#d09214 gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoBgNOTE guibg=#00b298 guifg=#1a1d23 gui=BOLD
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoFgNOTE guibg=NONE guifg=#00b298 gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoSignNOTE guibg=NONE guifg=#00b298 gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoBgTODO guibg=#50a4e9 guifg=#1a1d23 gui=BOLD
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoFgTODO guibg=NONE guifg=#50a4e9 gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoSignTODO guibg=NONE guifg=#50a4e9 gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoBgPERF guibg=#adb0bb guifg=#1a1d23 gui=BOLD
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoFgPERF guibg=NONE guifg=#adb0bb gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoSignPERF guibg=NONE guifg=#adb0bb gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoBgFIX guibg=#f8747e guifg=#1a1d23 gui=BOLD
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoFgFIX guibg=NONE guifg=#f8747e gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoSignFIX guibg=NONE guifg=#f8747e gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoBgTEST guibg=#adb0bb guifg=#1a1d23 gui=BOLD
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoFgTEST guibg=NONE guifg=#adb0bb gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoSignTEST guibg=NONE guifg=#adb0bb gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoBgHACK guibg=#d09214 guifg=#1a1d23 gui=BOLD
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoFgHACK guibg=NONE guifg=#d09214 gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: hi def TodoSignHACK guibg=NONE guifg=#d09214 gui=NONE
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup Todo
line 2:         autocmd!
line 3:         autocmd BufWinEnter,WinNew * lua require("todo-comments.highlight").attach()
line 4:         autocmd WinScrolled * lua require("todo-comments.highlight").highlight_win()
line 5:         autocmd ColorScheme * lua vim.defer_fn(require("todo-comments.config").colors, 10)
line 6:       augroup end
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: source /home/boris/.local/share/nvim/lazy/conform.nvim/plugin/conform.lua
line 1: sourcing "/home/boris/.local/share/nvim/lazy/conform.nvim/plugin/conform.lua"
finished sourcing /home/boris/.local/share/nvim/lazy/conform.nvim/plugin/conform.lua
continuing in nvim_exec2() called at User Autocommands for "AstroFile":0
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1:   highlight default link NvimDapVirtualText Comment
line 2:   highlight default link NvimDapVirtualTextChanged DiagnosticVirtualTextWarn
line 3:   highlight default link NvimDapVirtualTextError DiagnosticVirtualTextError
line 4:   highlight default link NvimDapVirtualTextInfo DiagnosticVirtualTextInfo
line 5:   
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroFile":0"
line 1:     command! DapVirtualTextEnable :lua require'nvim-dap-virtual-text'.enable()
line 2:     command! DapVirtualTextDisable :lua require'nvim-dap-virtual-text'.disable()
line 3:     command! DapVirtualTextToggle :lua require'nvim-dap-virtual-text'.toggle()
line 4:     command! DapVirtualTextForceRefresh :lua require'nvim-dap-virtual-text'.refresh()
line 5:     
finished sourcing nvim_exec2() called at User Autocommands for "AstroFile":0
continuing in User Autocommands for "AstroFile"
Executing: 
Executing User Autocommands for "AstroGitFile"
autocommand <Lua 99: ~/.local/share/nvim/lazy/lazy.nvim/lua/lazy/core/handler/event.lua:72>

line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroGitFile":0"
line 1: augroup filetypedetect
finished sourcing nvim_exec2() called at User Autocommands for "AstroGitFile":0
continuing in User Autocommands for "AstroGitFile"
line 0: sourcing "nvim_exec2() called at User Autocommands for "AstroGitFile":0"
line 1: augroup END
finished sourcing nvim_exec2() called at User Autocommands for "AstroGitFile":0
continuing in User Autocommands for "AstroGitFile"
Executing: 
Executing BufReadPost Autocommands for "*"
autocommand <Lua 199: /usr/share/nvim/runtime/filetype.lua:10>

Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling <SNR>2_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 2:  compiler make | setlocal formatoptions< comments< commentstring< include< includeexpr< suffixesadd<|if exists('b:rust_set_style')|setlocal tabstop< shiftwidth< softtabstop< expandtab< textwidth<|endif|if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustT
line 2: command -nargs=* -keepscript CompilerSet setlocal <args>
Searching for "compiler/make.*" in runtime path
Searching for "/home/boris/.config/nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/gitsigns.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-virtual-text/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/conform.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/aerial.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-highlight-colors/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-null-ls.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/none-ls.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-autopairs/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/vim-illuminate/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/guess-indent.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/compiler/make.*"
Searching for "/usr/share/nvim/runtime/compiler/make.*"
line 2: sourcing "/usr/share/nvim/runtime/compiler/make.vim"
line 1: " Vim compiler plugin
line 2: "
line 3: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>
line 4: " Last Change:^I2024 Sep 10
line 5: " Original Author: Konfekt
line 6: "
line 7: " This compiler plugin is used to reset previously set compiler options.
line 8: 
line 9: if exists("g:current_compiler") | unlet g:current_compiler | endif
line 9:  unlet g:current_compiler | endif
line 9:  endif
line 10: if exists("b:current_compiler") | unlet b:current_compiler | endif
line 10:  unlet b:current_compiler | endif
line 10:  endif
line 11: 
line 12: CompilerSet makeprg&
line 12: setlocal makeprg&
line 13: CompilerSet errorformat&
line 13: setlocal errorformat&
finished sourcing /usr/share/nvim/runtime/compiler/make.vim
continuing in <SNR>2_LoadFTPlugin
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/compiler/make.*"
Searching for "/usr/lib64/nvim/compiler/make.*"
Searching for "/home/boris/.local/state/nvim/lazy/readme/compiler/make.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/compiler/make.*"
line 2: :delcommand CompilerSet
line 2:  setlocal formatoptions< comments< commentstring< include< includeexpr< suffixesadd<|if exists('b:rust_set_style')|setlocal tabstop< shiftwidth< softtabstop< expandtab< textwidth<|endif|if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunm
line 2: if exists('b:rust_set_style')|setlocal tabstop< shiftwidth< softtabstop< expandtab< textwidth<|endif|if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <
line 2: setlocal tabstop< shiftwidth< softtabstop< expandtab< textwidth<|endif|if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buf
line 2: endif|if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet
line 2: if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:mat
line 2: let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild
line 2: unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delco
line 2: else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcomm
line 2: unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -
line 2: endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|d
line 2: if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcomm
line 2: setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buff
line 2: unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Cs
line 2: endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpu
line 2: if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|
line 2: setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcomman
line 2: unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustInfoToFile|delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer RustTest|silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: silent! nunmap <buffer> [[|silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: silent! nunmap <buffer> ]]|silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: silent! xunmap <buffer> [[|silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: silent! xunmap <buffer> ]]|silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: silent! ounmap <buffer> [[|silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: silent! ounmap <buffer> ]]|setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: setlocal matchpairs-=<:>|unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: unlet b:match_skip|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cinstall|delcommand -buffer Cruntarget
line 2: delcommand -buffer Cruntarget
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 20: runtime! ftplugin/rust[.]{vim,lua} ftplugin/rust_*.{vim,lua} ftplugin/rust/*.{vim,lua}
Searching for "ftplugin/rust[.]{vim,lua} ftplugin/rust_*.{vim,lua} ftplugin/rust/*.{vim,lua}" in runtime path
Searching for "/home/boris/.config/nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.config/nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.config/nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/gitsigns.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-virtual-text/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-virtual-text/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-virtual-text/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/conform.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/conform.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/conform.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/aerial.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/aerial.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/aerial.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-highlight-colors/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-highlight-colors/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-highlight-colors/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-null-ls.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/none-ls.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/none-ls.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/none-ls.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-autopairs/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-autopairs/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-autopairs/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/vim-illuminate/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/vim-illuminate/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/vim-illuminate/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/guess-indent.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/guess-indent.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/guess-indent.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust[.]{vim,lua}"
line 20: sourcing "/home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust.vim"
line 1: " Copied from built-in compiler/{rustc,cargo}.vim
line 2: setlocal errorformat=%f:%l:%c:\ %t%*[^:]:\ %m,%f:%l:%c:\ %*\\d:%*\\d\ %t%*[^:]:\ %m,%-G%f:%l\ %s,%-G%*[\ ]^,%-G%*[\ ]^%*[~],%-G%*[\ ]...
line 9: 
line 10: " New errorformat (after nightly 2016/08/10)
line 11: setlocal errorformat+=%-G,%-Gerror:\ aborting\ %.%#,%-Gerror:\ Could\ not\ compile\ %.%#,%Eerror:\ %m,%Eerror[E%n]:\ %m,%Wwarning:\ %m,%Inote:\ %m,%C\ %#-->\ %f:%l:%c
line 20: 
line 21: setlocal errorformat+=%-G%\\s%#Downloading%.%#,%-G%\\s%#Compiling%.%#,%-G%\\s%#Finished%.%#,%-G%\\s%#error:\ Could\ not\ compile\ %.%#,%-G%\\s%#To\ learn\ more\\,%.%#
finished sourcing /home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust.vim
continuing in <SNR>2_LoadFTPlugin
line 20: sourcing "/home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust.lua"
Searching for "lsp/rust-analyzer.lua" in runtime path
Searching for "/home/boris/.config/nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/gitsigns.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-virtual-text/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/conform.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/aerial.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-highlight-colors/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/mason-null-ls.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/none-ls.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-autopairs/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/vim-illuminate/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/guess-indent.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/lsp/rust-analyzer.lua"
Searching for "/usr/share/nvim/runtime/lsp/rust-analyzer.lua"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/lsp/rust-analyzer.lua"
Searching for "/usr/lib64/nvim/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/state/nvim/lazy/readme/lsp/rust-analyzer.lua"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/lsp/rust-analyzer.lua"
not found in runtime path: "lsp/rust-analyzer.lua"
finished sourcing /home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust.lua
continuing in <SNR>2_LoadFTPlugin
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/ftplugin/rust/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/rust[.]{vim,lua}"
line 20: sourcing "/usr/share/nvim/runtime/ftplugin/rust.vim"
line 1: " Language:^IRust
line 2: " Description:^IVim ftplugin for Rust
line 3: " Maintainer:^IChris Morgan <me@chrismorgan.info>
line 4: " Last Change:^I2024 Mar 17
line 5: "^I^I2024 May 23 by Riley Bruins <ribru17@gmail.com ('commentstring')
line 6: " For bugs, patches and license go to https://github.com/rust-lang/rust.vim
line 7: 
line 8: if exists("b:did_ftplugin")
line 9:     finish
line 10: endif
line 11: let b:did_ftplugin = 1
line 12: 
line 13: " vint: -ProhibitAbbreviationOption
line 14: let s:save_cpo = &cpo
line 15: set cpo&vim
line 16: " vint: +ProhibitAbbreviationOption
line 17: 
line 18: if get(b:, 'current_compiler', '') ==# ''
line 19:     if strlen(findfile('Cargo.toml', '.;')) > 0
line 20:         compiler cargo
line 20: command -nargs=* -keepscript CompilerSet setlocal <args>
Searching for "compiler/cargo.*" in runtime path
Searching for "/home/boris/.config/nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/gitsigns.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-virtual-text/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/conform.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/aerial.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-highlight-colors/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-null-ls.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/none-ls.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-autopairs/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/vim-illuminate/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/guess-indent.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/compiler/cargo.*"
Searching for "/usr/share/nvim/runtime/compiler/cargo.*"
line 20: sourcing "/usr/share/nvim/runtime/compiler/cargo.vim"
line 1: " Vim compiler file
line 2: " Compiler:         Cargo Compiler
line 3: " Maintainer:       Damien Radtke <damienradtke@gmail.com>
line 4: " Latest Revision:  2023-09-11
line 5: "                   2024 Apr 05 by The Vim Project (removed :CompilerSet definition)
line 6: " For bugs, patches and license go to https://github.com/rust-lang/rust.vim
line 7: 
line 8: if exists('current_compiler')
line 9:     finish
line 10: endif
line 11: runtime compiler/rustc.vim
Searching for "compiler/rustc.vim" in runtime path
Searching for "/home/boris/.config/nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/gitsigns.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-virtual-text/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/conform.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/aerial.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-highlight-colors/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason-null-ls.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/none-ls.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-autopairs/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/vim-illuminate/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/guess-indent.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/compiler/rustc.vim"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/compiler/rustc.vim"
Searching for "/usr/share/nvim/runtime/compiler/rustc.vim"
line 11: sourcing "/usr/share/nvim/runtime/compiler/rustc.vim"
line 1: " Vim compiler file
line 2: " Compiler:         Rust Compiler
line 3: " Maintainer:       Chris Morgan <me@chrismorgan.info>
line 4: " Latest Revision:  2023-09-11
line 5: " For bugs, patches and license go to https://github.com/rust-lang/rust.vim
line 6: 
line 7: if exists("current_compiler")
line 8:     finish
line 9: endif
line 10: let current_compiler = "rustc"
line 11: 
line 12: " vint: -ProhibitAbbreviationOption
line 13: let s:save_cpo = &cpo
line 14: set cpo&vim
line 15: " vint: +ProhibitAbbreviationOption
line 16: 
line 17: if get(g:, 'rustc_makeprg_no_percent', 0)
line 18:     CompilerSet makeprg=rustc
line 19: else
line 20:     if has('patch-7.4.191')
line 21:       CompilerSet makeprg=rustc\ \%:S
line 21: setlocal makeprg=rustc\ \%:S
line 22:     else
line 23:       CompilerSet makeprg=rustc\ \"%\"
line 24:     endif
line 25: endif
line 26: 
line 27: " New errorformat (after nightly 2016/08/10)
line 28: CompilerSet errorformat=%-G,%-Gerror:\ aborting\ %.%#,%-Gerror:\ Could\ not\ compile\ %.%#,%Eerror:\ %m,%Eerror[E%n]:\ %m,%Wwarning:\ %m,%Inote:\ %m,%C\ %#-->\ %f:%l:%c,%E\ \ left:%m,%C\ right:%m\ %f:%l:%c,%Z
line 28: setlocal errorformat=%-G,%-Gerror:\ aborting\ %.%#,%-Gerror:\ Could\ not\ compile\ %.%#,%Eerror:\ %m,%Eerror[E%n]:\ %m,%Wwarning:\ %m,%Inote:\ %m,%C\ %#-->\ %f:%l:%c,%E\ \ left:%m,%C\ right:%m\ %f:%l:%c,%Z
line 38: 
line 39: " Old errorformat (before nightly 2016/08/10)
line 40: CompilerSet errorformat+=%f:%l:%c:\ %t%*[^:]:\ %m,%f:%l:%c:\ %*\\d:%*\\d\ %t%*[^:]:\ %m,%-G%f:%l\ %s,%-G%*[\ ]^,%-G%*[\ ]^%*[~],%-G%*[\ ]...
line 40: setlocal errorformat+=%f:%l:%c:\ %t%*[^:]:\ %m,%f:%l:%c:\ %*\\d:%*\\d\ %t%*[^:]:\ %m,%-G%f:%l\ %s,%-G%*[\ ]^,%-G%*[\ ]^%*[~],%-G%*[\ ]...
line 47: 
line 48: " vint: -ProhibitAbbreviationOption
line 49: let &cpo = s:save_cpo
line 50: unlet s:save_cpo
line 51: " vint: +ProhibitAbbreviationOption
line 52: 
line 53: " vim: set et sw=4 sts=4 ts=8:
finished sourcing /usr/share/nvim/runtime/compiler/rustc.vim
continuing in /usr/share/nvim/runtime/compiler/cargo.vim
line 12: let current_compiler = "cargo"
line 13: 
line 14: " vint: -ProhibitAbbreviationOption
line 15: let s:save_cpo = &cpo
line 16: set cpo&vim
line 17: " vint: +ProhibitAbbreviationOption
line 18: 
line 19: if exists('g:cargo_makeprg_params')
line 20:     execute 'CompilerSet makeprg=cargo\ '.escape(g:cargo_makeprg_params, ' \|"').'\ $*'
line 21: else
line 22:     CompilerSet makeprg=cargo\ $*
line 22: setlocal makeprg=cargo\ $*
line 23: endif
line 24: 
line 25: augroup RustCargoQuickFixHooks
line 26:     autocmd!
line 27:     autocmd QuickFixCmdPre make call cargo#quickfix#CmdPre()
line 28:     autocmd QuickFixCmdPost make call cargo#quickfix#CmdPost()
line 29: augroup END
line 30: 
line 31: " Ignore general cargo progress messages
line 32: CompilerSet errorformat+=%-G%\\s%#Downloading%.%#,%-G%\\s%#Checking%.%#,%-G%\\s%#Compiling%.%#,%-G%\\s%#Finished%.%#,%-G%\\s%#error:\ Could\ not\ compile\ %.%#,%-G%\\s%#To\ learn\ more\\,%.%#,%-G%\\s%#For\ more\ information\ about\ this\ error\\,%.%#,%-Gnote:\ Run\ with\ \`RUST_BACKTRACE=%.%#,%.%#panicked\ at\ \\'%m\\'\\,\ %f:%l:%c
line 32: setlocal errorformat+=%-G%\\s%#Downloading%.%#,%-G%\\s%#Checking%.%#,%-G%\\s%#Compiling%.%#,%-G%\\s%#Finished%.%#,%-G%\\s%#error:\ Could\ not\ compile\ %.%#,%-G%\\s%#To\ learn\ more\\,%.%#,%-G%\\s%#For\ more\ information\ about\ this\ error\\,%.%#,%-Gnote:\ Run\ with\ \`RUST_BACKTRACE=%.%#,%.%#panicked\ at\ \\'%m\\'\\,\ %f:%l:%c
line 42: 
line 43: " vint: -ProhibitAbbreviationOption
line 44: let &cpo = s:save_cpo
line 45: unlet s:save_cpo
line 46: " vint: +ProhibitAbbreviationOption
line 47: 
line 48: " vim: set et sw=4 sts=4 ts=8:
finished sourcing /usr/share/nvim/runtime/compiler/cargo.vim
continuing in /usr/share/nvim/runtime/ftplugin/rust.vim
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/compiler/cargo.*"
Searching for "/usr/lib64/nvim/compiler/cargo.*"
Searching for "/home/boris/.local/state/nvim/lazy/readme/compiler/cargo.*"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/compiler/cargo.*"
line 20: :delcommand CompilerSet
line 21:     else
line 22:         compiler rustc
line 23:     endif
line 24: endif
line 25: 
line 26: " Variables {{{1
line 27: 
line 28: " The rust source code at present seems to typically omit a leader on /*!
line 29: " comments, so we'll use that as our default, but make it easy to switch.
line 30: " This does not affect indentation at all (I tested it with and without
line 31: " leader), merely whether a leader is inserted by default or not.
line 32: if get(g:, 'rust_bang_comment_leader', 0)
line 33:     " Why is the `,s0:/*,mb:\ ,ex:*/` there, you ask? I don't understand why,
line 34:     " but without it, */ gets indented one space even if there were no
line 35:     " leaders. I'm fairly sure that's a Vim bug.
line 36:     setlocal comments=s1:/*,mb:*,ex:*/,s0:/*,mb:\ ,ex:*/,:///,://!,://
line 37: else
line 38:     setlocal comments=s0:/*!,ex:*/,s1:/*,mb:*,ex:*/,:///,://!,://
line 39: endif
line 40: setlocal commentstring=//\ %s
line 41: setlocal formatoptions-=t formatoptions+=croqnl
line 42: " j was only added in 7.3.541, so stop complaints about its nonexistence
line 43: silent! setlocal formatoptions+=j
line 44: 
line 45: " smartindent will be overridden by indentexpr if filetype indent is on, but
line 46: " otherwise it's better than nothing.
line 47: setlocal smartindent nocindent
line 48: 
line 49: if get(g:, 'rust_recommended_style', 1)
line 50:     let b:rust_set_style = 1
line 51:     setlocal shiftwidth=4 softtabstop=4 expandtab
line 52:     setlocal textwidth=99
line 53: endif
line 54: 
line 55: setlocal include=\\v^\\s*(pub\\s+)?use\\s+\\zs(\\f\|:)+
line 56: setlocal includeexpr=rust#IncludeExpr(v:fname)
line 57: 
line 58: setlocal suffixesadd=.rs
line 59: 
line 60: if exists("g:ftplugin_rust_source_path")
line 61:     let &l:path=g:ftplugin_rust_source_path . ',' . &l:path
line 62: endif
line 63: 
line 64: if exists("g:loaded_delimitMate")
line 65:     if exists("b:delimitMate_excluded_regions")
line 66:         let b:rust_original_delimitMate_excluded_regions = b:delimitMate_excluded_regions
line 67:     endif
line 68: 
line 69:     augroup rust.vim.DelimitMate
line 70:         autocmd!
line 71: 
line 72:         autocmd User delimitMate_map   :call rust#delimitmate#onMap()
line 73:         autocmd User delimitMate_unmap :call rust#delimitmate#onUnmap()
line 74:     augroup END
line 75: endif
line 76: 
line 77: " Integration with auto-pairs (https://github.com/jiangmiao/auto-pairs)
line 78: if exists("g:AutoPairsLoaded") && !get(g:, 'rust_keep_autopairs_default', 0)
line 79:     let b:AutoPairs = {'(':')', '[':']', '{':'}','"':'"', '`':'`'}
line 80: endif
line 81: 
line 82: if has("folding") && get(g:, 'rust_fold', 0)
line 83:     let b:rust_set_foldmethod=1
line 84:     setlocal foldmethod=syntax
line 85:     if g:rust_fold == 2
line 86:         setlocal foldlevel<
line 87:     else
line 88:         setlocal foldlevel=99
line 89:     endif
line 90: endif
line 91: 
line 92: if has('conceal') && get(g:, 'rust_conceal', 0)
line 93:     let b:rust_set_conceallevel=1
line 94:     setlocal conceallevel=2
line 95: endif
line 96: 
line 97: " Motion Commands {{{1
line 98: if !exists("g:no_plugin_maps") && !exists("g:no_rust_maps")
line 99:     " Bind motion commands to support hanging indents
line 100:     nnoremap <silent> <buffer> [[ :call rust#Jump('n', 'Back')<CR>
line 101:     nnoremap <silent> <buffer> ]] :call rust#Jump('n', 'Forward')<CR>
line 102:     xnoremap <silent> <buffer> [[ :call rust#Jump('v', 'Back')<CR>
line 103:     xnoremap <silent> <buffer> ]] :call rust#Jump('v', 'Forward')<CR>
line 104:     onoremap <silent> <buffer> [[ :call rust#Jump('o', 'Back')<CR>
line 105:     onoremap <silent> <buffer> ]] :call rust#Jump('o', 'Forward')<CR>
line 106: endif
line 107: 
line 108: " Commands {{{1
line 109: 
line 110: " See |:RustRun| for docs
line 111: command! -nargs=* -complete=file -bang -buffer RustRun call rust#Run(<bang>0, <q-args>)
line 112: 
line 113: " See |:RustExpand| for docs
line 114: command! -nargs=* -complete=customlist,rust#CompleteExpand -bang -buffer RustExpand call rust#Expand(<bang>0, <q-args>)
line 115: 
line 116: " See |:RustEmitIr| for docs
line 117: command! -nargs=* -buffer RustEmitIr call rust#Emit("llvm-ir", <q-args>)
line 118: 
line 119: " See |:RustEmitAsm| for docs
line 120: command! -nargs=* -buffer RustEmitAsm call rust#Emit("asm", <q-args>)
line 121: 
line 122: " See |:RustPlay| for docs
line 123: command! -range=% -buffer RustPlay :call rust#Play(<count>, <line1>, <line2>, <f-args>)
line 124: 
line 125: " See |:RustFmt| for docs
line 126: command! -bar -buffer RustFmt call rustfmt#Format()
line 127: 
line 128: " See |:RustFmtRange| for docs
line 129: command! -range -buffer RustFmtRange call rustfmt#FormatRange(<line1>, <line2>)
line 130: 
line 131: " See |:RustInfo| for docs
line 132: command! -bar -buffer RustInfo call rust#debugging#Info()
line 133: 
line 134: " See |:RustInfoToClipboard| for docs
line 135: command! -bar -buffer RustInfoToClipboard call rust#debugging#InfoToClipboard()
line 136: 
line 137: " See |:RustInfoToFile| for docs
line 138: command! -bar -nargs=1 -buffer RustInfoToFile call rust#debugging#InfoToFile(<f-args>)
line 139: 
line 140: " See |:RustTest| for docs
line 141: command! -buffer -nargs=* -count -bang RustTest call rust#Test(<q-mods>, <count>, <bang>0, <q-args>)
line 142: 
line 143: if !exists("b:rust_last_rustc_args") || !exists("b:rust_last_args")
line 144:     let b:rust_last_rustc_args = []
line 145:     let b:rust_last_args = []
line 146: endif
line 147: 
line 148: " Cleanup {{{1
line 149: 
line 150: let b:undo_ftplugin = " compiler make | setlocal formatoptions< comments< commentstring< include< includeexpr< suffixesadd<|if exists('b:rust_set_style')|setlocal tabstop< shiftwidth< softtabstop< expandtab< textwidth<|endif|if exists('b:rust_original_delimitMate_excluded_regions')|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions|unlet b:rust_original_delimitMate_excluded_regions|else|unlet! b:delimitMate_excluded_regions|endif|if exists('b:rust_set_foldmethod')|setlocal foldmethod< foldlevel<|unlet b:rust_set_foldmethod|endif|if exists('b:rust_set_conceallevel')|setlocal conceallevel<|unlet b:rust_set_conceallevel|endif|unlet! b:rust_last_rustc_args b:rust_last_args|delcommand -buffer RustRun|delcommand -buffer RustExpand|delcommand -buffer RustEmitIr|delcommand -buffer RustEmitAsm|delcommand -buffer RustPlay|delcommand -buffer RustFmt|delcommand -buffer RustFmtRange|delcommand -buffer RustInfo|delcommand -buffer RustInfoToClipboard|delcommand -buffer RustInfoToFile
line 191: 
line 192: " }}}1
line 193: 
line 194: " Code formatting on save
line 195: augroup rust.vim.PreWrite
line 196:     autocmd!
line 197:     autocmd BufWritePre *.rs silent! call rustfmt#PreWrite()
line 198: augroup END
line 199: 
line 200: setlocal matchpairs+=<:>
line 201: " For matchit.vim (rustArrow stops `Fn() -> X` messing things up)
line 202: let b:match_skip = 's:comment\|string\|rustCharacter\|rustArrow'
line 203: 
line 204: command! -buffer -nargs=+ Cargo call cargo#cmd(<q-args>)
line 205: command! -buffer -nargs=* Cbuild call cargo#build(<q-args>)
line 206: command! -buffer -nargs=* Ccheck call cargo#check(<q-args>)
line 207: command! -buffer -nargs=* Cclean call cargo#clean(<q-args>)
line 208: command! -buffer -nargs=* Cdoc call cargo#doc(<q-args>)
line 209: command! -buffer -nargs=+ Cnew call cargo#new(<q-args>)
line 210: command! -buffer -nargs=* Cinit call cargo#init(<q-args>)
line 211: command! -buffer -nargs=* Crun call cargo#run(<q-args>)
line 212: command! -buffer -nargs=* Ctest call cargo#test(<q-args>)
line 213: command! -buffer -nargs=* Cbench call cargo#bench(<q-args>)
line 214: command! -buffer -nargs=* Cupdate call cargo#update(<q-args>)
line 215: command! -buffer -nargs=* Csearch  call cargo#search(<q-args>)
line 216: command! -buffer -nargs=* Cpublish call cargo#publish(<q-args>)
line 217: command! -buffer -nargs=* Cinstall call cargo#install(<q-args>)
line 218: command! -buffer -nargs=* Cruntarget call cargo#runtarget(<q-args>)
line 219: 
line 220: let b:undo_ftplugin .= '|delcommand -buffer Cargo|delcommand -buffer Cbuild|delcommand -buffer Ccheck|delcommand -buffer Cclean|delcommand -buffer Cdoc|delcommand -buffer Cnew|delcommand -buffer Cinit|delcommand -buffer Crun|delcommand -buffer Ctest|delcommand -buffer Cbench|delcommand -buffer Cupdate|delcommand -buffer Csearch|delcommand -buffer Cpublish|delcommand -buffer Cinstall|delcommand -buffer Cruntarget'
line 236: 
line 237: " vint: -ProhibitAbbreviationOption
line 238: let &cpo = s:save_cpo
line 239: unlet s:save_cpo
line 240: " vint: +ProhibitAbbreviationOption
line 241: 
line 242: " vim: set et sw=4 sts=4 ts=8:
finished sourcing /usr/share/nvim/runtime/ftplugin/rust.vim
continuing in <SNR>2_LoadFTPlugin
Searching for "/usr/share/nvim/runtime/ftplugin/rust_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/ftplugin/rust/*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/rust[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/rust_*.{vim,lua}"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/rust/*.{vim,lua}"
Searching for "/usr/lib64/nvim/ftplugin/rust[.]{vim,lua}"
Searching for "/usr/lib64/nvim/ftplugin/rust_*.{vim,lua}"
Searching for "/usr/lib64/nvim/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/ftplugin/rust/*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/ftplugin/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/ftplugin/rust_*.{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/ftplugin/rust/*.{vim,lua}"
line 21:       endfor
line 16:       for name in split(s, '\.')
line 17:         " Load Lua ftplugins after Vim ftplugins _per directory_
line 18:         " TODO(clason): use nvim__get_runtime when supports globs and modeline
line 19:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 20:         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
line 21:       endfor
line 22:     endif
<SNR>2_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling <SNR>3_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 2: setlocal cindent< cinoptions< cinkeys< cinwords< lisp< autoindent< indentkeys< indentexpr<
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 15: runtime! indent/rust[.]{vim,lua}
Searching for "indent/rust[.]{vim,lua}" in runtime path
Searching for "/home/boris/.config/nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/gitsigns.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-virtual-text/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/conform.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/aerial.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-highlight-colors/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-null-ls.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/none-ls.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-autopairs/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/vim-illuminate/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/guess-indent.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/indent/rust[.]{vim,lua}"
Searching for "/usr/share/nvim/runtime/indent/rust[.]{vim,lua}"
line 15: sourcing "/usr/share/nvim/runtime/indent/rust.vim"
line 1: " Vim indent file
line 2: " Language:         Rust
line 3: " Author:           Chris Morgan <me@chrismorgan.info>
line 4: " Last Change:      2023-09-11
line 5: " 2024 Jul 04 by Vim Project: use shiftwidth() instead of hard-coding shifted values (#15138)
line 6: 
line 7: " For bugs, patches and license go to https://github.com/rust-lang/rust.vim
line 8: " Note: upstream seems umaintained: https://github.com/rust-lang/rust.vim/issues/502
line 9: 
line 10: " Only load this indent file when no other was loaded.
line 11: if exists("b:did_indent")
line 12:     finish
line 13: endif
line 14: let b:did_indent = 1
line 15: 
line 16: setlocal cindent
line 17: setlocal cinoptions=L0,(s,Ws,J1,j1,m1
line 18: setlocal cinkeys=0{,0},!^F,o,O,0[,0],0(,0)
line 19: " Don't think cinwords will actually do anything at all... never mind
line 20: setlocal cinwords=for,if,else,while,loop,impl,mod,unsafe,trait,struct,enum,fn,extern,macro
line 21: 
line 22: " Some preliminary settings
line 23: setlocal nolisp^I^I" Make sure lisp indenting doesn't supersede us
line 24: setlocal autoindent^I" indentexpr isn't much help otherwise
line 25: " Also do indentkeys, otherwise # gets shoved to column 0 :-/
line 26: setlocal indentkeys=0{,0},!^F,o,O,0[,0],0(,0)
line 27: 
line 28: setlocal indentexpr=GetRustIndent(v:lnum)
line 29: 
line 30: let b:undo_indent = "setlocal cindent< cinoptions< cinkeys< cinwords< lisp< autoindent< indentkeys< indentexpr<"
line 31: 
line 32: " Only define the function once.
line 33: if exists("*GetRustIndent")
line 34:     finish
finished sourcing /usr/share/nvim/runtime/indent/rust.vim
continuing in <SNR>3_LoadIndent
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/indent/rust[.]{vim,lua}"
Searching for "/usr/lib64/nvim/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/state/nvim/lazy/readme/indent/rust[.]{vim,lua}"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/indent/rust[.]{vim,lua}"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         " XXX: "[.]" in the pattern makes it a wildcard on Windows
line 15:         exe $'runtime! indent/{name}[.]{{vim,lua}}'
line 16:       endfor
line 17:     endif
<SNR>3_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand <Lua 365: ~/.local/share/nvim/lazy/AstroNvim/lua/astronvim/plugins/_astrocore_autocmds.lua:123>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 396: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:633>

Executing: 
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing FileType Autocommands for "*"
autocommand <Lua 431: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/init.lua:28>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 147: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 144: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing: if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  0verbose exe "set syntax=" . expand("<amatch>") | endif
Executing:  endif
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling <SNR>51_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   0verbose let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         " XXX: "[.]" in the first pattern makes it a wildcard on Windows
line 26:         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
line 27:       endif
line 28:     endfor
line 29:   endif
<SNR>51_SynSet returning #0

continuing in Syntax Autocommands for "*"

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 145: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/rust/textobjects.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/gitsigns.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-virtual-text/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/conform.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/aerial.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-highlight-colors/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-null-ls.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/none-ls.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-autopairs/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/vim-illuminate/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/guess-indent.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/textobjects.scm"
Searching for "/usr/lib64/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/textobjects.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 142: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/rust/textobjects.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/gitsigns.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-virtual-text/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/conform.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/aerial.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-highlight-colors/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-null-ls.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/none-ls.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-autopairs/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/vim-illuminate/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/guess-indent.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/textobjects.scm"
Searching for "/usr/lib64/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/textobjects.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 143: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Searching for "queries/rust/textobjects.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/gitsigns.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-virtual-text/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/conform.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/aerial.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-highlight-colors/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-null-ls.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/none-ls.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-autopairs/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/vim-illuminate/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/guess-indent.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/textobjects.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/textobjects.scm"
Searching for "/usr/lib64/nvim/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/textobjects.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/textobjects.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 140: ~/.local/share/nvim/lazy/nvim-treesitter/lua/nvim-treesitter/configs.lua:132>

Executing: 
Executing FileType Autocommands for "<buffer=4>"
autocommand <Lua 1276: /usr/share/nvim/runtime/lua/vim/treesitter/_fold.lua:394>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 941: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:58>

Searching for "queries/rust/locals.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/gitsigns.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-virtual-text/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/conform.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/aerial.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-highlight-colors/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-null-ls.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/none-ls.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-autopairs/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/vim-illuminate/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/guess-indent.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/locals.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/locals.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/locals.scm"
Searching for "/usr/lib64/nvim/queries/rust/locals.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/locals.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/locals.scm"
Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 1572: ~/.local/share/nvim/lazy/nvim-autopairs/lua/nvim-autopairs.lua:78>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 1143: ~/.local/share/nvim/lazy/nvim-ts-autotag/lua/nvim-ts-autotag/config/plugin.lua:210>

Executing: 
Executing FileType Autocommands for "*"
autocommand <Lua 1542: ~/.local/share/nvim/lazy/none-ls.nvim/lua/null-ls/init.lua:42>

Executing: 
Executing: 
autocommand if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing: if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif
Executing:  runtime! scripts.vim | endif
Executing:  endif
Executing BufReadPost Autocommands for "*"
autocommand <Lua 1498: ~/.local/share/nvim/lazy/gitsigns.nvim/lua/gitsigns.lua:143>

Executing: 
Executing LspAttach Autocommands for "*"
autocommand <Lua 215: ~/.local/share/nvim/lazy/astroui/lua/astroui/folding.lua:116>

Executing: 
Executing LspAttach Autocommands for "*"
autocommand <Lua 403: ~/.local/share/nvim/lazy/astrocore/lua/astrocore/init.lua:674>

Executing: 
Executing LspAttach Autocommands for "*"
autocommand <Lua 206: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/init.lua:187>

Executing: 
Executing LspAttach Autocommands for "*"
autocommand <Lua 564: ~/.local/share/nvim/lazy/which-key.nvim/lua/which-key/state.lua:126>

Executing: 
Executing LspAttach Autocommands for "*"
autocommand <Lua 1024: ~/.local/share/nvim/lazy/lsp_signature.nvim/lua/lsp_signature/init.lua:1252>

Executing: 
Executing LspAttach Autocommands for "*"
autocommand <Lua 830: /usr/share/nvim/runtime/lua/vim/lsp/inlay_hint.lua:268>

Executing: 
Executing LspAttach Autocommands for "*"
autocommand <Lua 853: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:281>

Executing: 
Executing LspAttach Autocommands for "*"
autocommand <Lua 1535: ~/.local/share/nvim/lazy/nvim-highlight-colors/lua/nvim-highlight-colors/init.lua:264>

Executing: 
Executing LspAttach Autocommands for "*"
autocommand <Lua 1510: ~/.local/share/nvim/lazy/aerial.nvim/lua/aerial/init.lua:175>

Executing: 
Executing LspNotify Autocommands for "*"
autocommand <Lua 1071: /usr/share/nvim/runtime/lua/vim/lsp/inlay_hint.lua:251>

Executing: 
Executing LspNotify Autocommands for "<buffer=4>"
autocommand <Lua 1454: /usr/share/nvim/runtime/lua/vim/lsp/diagnostic.lua:359>

Executing: 
Executing LspNotify Autocommands for "<buffer=4>"
autocommand <Lua 1444: /usr/share/nvim/runtime/lua/vim/lsp/_folding_range.lua:287>

Executing: 
Executing LspNotify Autocommands for "*"
autocommand <Lua 1071: /usr/share/nvim/runtime/lua/vim/lsp/inlay_hint.lua:251>

Executing: 
Executing LspNotify Autocommands for "<buffer=4>"
autocommand <Lua 1454: /usr/share/nvim/runtime/lua/vim/lsp/diagnostic.lua:359>

Executing: 
Executing LspNotify Autocommands for "<buffer=4>"
autocommand <Lua 1444: /usr/share/nvim/runtime/lua/vim/lsp/_folding_range.lua:287>

Executing: 
Searching for "queries/rust/aerial.scm" in runtime path
Searching for "/home/boris/.config/nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lazy.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/gitsigns.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-virtual-text/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/conform.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/aerial.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-highlight-colors/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/todo-comments.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-null-ls.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/none-ls.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-ts-autotag/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-autopairs/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/vim-illuminate/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/guess-indent.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-lspconfig.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neoconf.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-lspconfig/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrolsp/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/rustaceanvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/lsp_signature.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/persistent-breakpoints.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mini.icons/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nui.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/neo-tree.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter-textobjects/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-treesitter/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/which-key.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-tool-installer.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/heirline.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.compat/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocommunity/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/plenary.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/blink.cmp/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-nio/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap-ui/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/mason-nvim-dap.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/nvim-dap/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope-dap.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/telescope.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/presence.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/snacks.nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/AstroNvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrotheme/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astroui/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/astrocore/queries/rust/aerial.scm"
Searching for "/usr/share/nvim/runtime/queries/rust/aerial.scm"
Searching for "/usr/share/nvim/runtime/pack/dist/opt/matchit/queries/rust/aerial.scm"
Searching for "/usr/lib64/nvim/queries/rust/aerial.scm"
Searching for "/home/boris/.local/state/nvim/lazy/readme/queries/rust/aerial.scm"
Searching for "/home/boris/.local/share/nvim/lazy/cmp-dap/after/queries/rust/aerial.scm"
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing DiagnosticChanged Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_diagnostic_changed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_diagnostic_changed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 1719: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "GitSignsUpdate"
autocommand <Lua 1719: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing CursorHold Autocommands for "<buffer=4>"
autocommand <Lua 383: ~/.local/share/nvim/lazy/lsp_signature.nvim/lua/lsp_signature/helper.lua:27>

Executing: 
autocommand <Lua 1576: ~/.local/share/nvim/lazy/lsp_signature.nvim/lua/lsp_signature/helper.lua:35>

Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing BufNew Autocommands for "*"
autocommand <Lua 567: ~/.local/share/nvim/lazy/which-key.nvim/lua/which-key/state.lua:135>

Executing: 
Executing DiagnosticChanged Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_diagnostic_changed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_diagnostic_changed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
Executing DiagnosticChanged Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_diagnostic_changed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_diagnostic_changed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
Executing BufNew Autocommands for "*"
autocommand <Lua 567: ~/.local/share/nvim/lazy/which-key.nvim/lua/which-key/state.lua:135>

Executing: 
Executing DiagnosticChanged Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_diagnostic_changed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_diagnostic_changed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
Executing DiagnosticChanged Autocommands for "*"
autocommand :lua require('neo-tree.events').fire_event('vim_diagnostic_changed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })

Executing: :lua require('neo-tree.events').fire_event('vim_diagnostic_changed', { afile = vim.F.npcall(vim.fn.expand, '<afile>') or '' })
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing ModeChanged Autocommands for "*"
autocommand <Lua 466: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:86>

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand <Lua 563: ~/.local/share/nvim/lazy/which-key.nvim/lua/which-key/state.lua:93>

Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing: unlet! b:keymap_name
Executing: unlet! b:keymap_name
Executing: 
Executing ModeChanged Autocommands for "*:*"
autocommand <Lua 1592: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing ModeChanged Autocommands for "*:*"
autocommand <Lua 1591: ~/.local/share/nvim/lazy/astroui/lua/astroui/status/init.lua:144>

Executing: 
Executing ModeChanged Autocommands for "*:*"
autocommand <Lua 1584: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing ModeChanged Autocommands for "*"
autocommand <Lua 1560: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1397: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/scope.lua:675>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1587: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1561: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1476: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing CursorMoved Autocommands for "<buffer=4>"
autocommand <Lua 1468: ~/.local/share/nvim/lazy/aerial.nvim/lua/aerial/autocommands.lua:141>

Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing LspProgress Autocommands for "*"
autocommand <Lua 851: ~/.local/share/nvim/lazy/astrolsp/lua/astrolsp/init.lua:337>

Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1397: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/scope.lua:675>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1587: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1561: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1476: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing CursorMoved Autocommands for "<buffer=4>"
autocommand <Lua 1468: ~/.local/share/nvim/lazy/aerial.nvim/lua/aerial/autocommands.lua:141>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1410: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing User Autocommands for "AstroLspProgress"
autocommand <Lua 1626: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1397: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/scope.lua:675>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1587: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1561: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1476: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing CursorMoved Autocommands for "<buffer=4>"
autocommand <Lua 1468: ~/.local/share/nvim/lazy/aerial.nvim/lua/aerial/autocommands.lua:141>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling <SNR>41_Highlight_Matching_Pair()

line 1:   if !exists("w:matchparen_ids")
line 2:     let w:matchparen_ids = []
line 3:   endif
line 4:   " Remove any previous match.
line 5:   call s:Remove_Matches()
calling <SNR>41_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     while !empty(w:matchparen_ids)
line 3:       silent! call remove(w:matchparen_ids, 0)->matchdelete()
line 4:     endwhile
line 5:     let w:paren_hl_on = 0
line 6:   endif
<SNR>41_Remove_Matches returning #0

continuing in <SNR>41_Highlight_Matching_Pair

line 6: 
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12: 
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17: 
line 18:   let text = getline(c_lnum)
line 19:   let c_before = text->strpart(0, c_col - 1)->slice(-1)
line 20:   let c = text->strpart(c_col - 1)->slice(0, 1)
line 21:   let plist = split(&matchpairs, '.\zs[:,]')
line 22:   let i = index(plist, c)
line 23:   if i < 0
line 24:     " not found, in Insert mode try character before the cursor
line 25:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 26:       let before = strlen(c_before)
line 27:       let c = c_before
line 28:       let i = index(plist, c)
line 29:     endif
line 30:     if i < 0
line 31:       " not found, nothing to do
line 32:       return
<SNR>41_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand <Lua 204: ~/.local/share/nvim/lazy/blink.cmp/lua/blink/cmp/lib/buffer_events.lua:60>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1397: ~/.local/share/nvim/lazy/snacks.nvim/lua/snacks/scope.lua:675>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1587: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1561: ~/.local/share/nvim/lazy/vim-illuminate/lua/illuminate/engine.lua:49>

Executing: 
Executing CursorMoved Autocommands for "*"
autocommand <Lua 1476: ~/.local/share/nvim/lazy/heirline.nvim/lua/heirline/statusline.lua:291>

Executing: 
Executing CursorMoved Autocommands for "<buffer=4>"
autocommand <Lua 1468: ~/.local/share/nvim/lazy/aerial.nvim/lua/aerial/autocommands.lua:141>

Executing: 
calling provider#clipboard#Call('set', [['', '#[cfg(test)]', 'mod tests {', '    use super::*;', '}'], 'v', '+'])

line 1:   if get(s:, 'here', v:false)  " Clipboard provider must not recurse. #7184
line 2:     return 0
line 3:   endif
line 4:   let s:here = v:true
line 5:   try
line 6:     return call(s:clipboard[a:method],a:args,s:clipboard)
calling 3(['', '#[cfg(test)]', 'mod tests {', '    use super::*;', '}'], 'v', '+')

line 1:   if a:reg == '"'
line 2:     call s:clipboard.set(a:lines,a:regtype,'+')
line 3:     if s:copy['*'] != s:copy['+']
line 4:       call s:clipboard.set(a:lines,a:regtype,'*')
line 5:     end
line 6:     return 0
line 7:   end
line 8: 
line 9:   if type(s:copy[a:reg]) == v:t_func
line 10:     call s:copy[a:reg](a:lines, a:regtype)
line 11:     return 0
line 12:   end
line 13: 
line 14:   if s:cache_enabled == 0
line 15:     call s:try_cmd(s:copy[a:reg], a:lines)
line 16:     "Cache it anyway we can compare it later to get regtype of the yank
line 17:     let s:selections[a:reg] = copy(s:selection)
line 18:     let s:selections[a:reg].data = [a:lines, a:regtype]
line 19:     return 0
line 20:   end
line 21: 
line 22:   if s:selections[a:reg].owner > 0
line 23:     let prev_job = s:selections[a:reg].owner
line 24:   end
line 25:   let s:selections[a:reg] = copy(s:selection)
line 26:   let selection = s:selections[a:reg]
line 27:   let selection.data = [a:lines, a:regtype]
line 28:   let selection.argv = s:copy[a:reg]
line 29:   let selection.detach = s:cache_enabled
line 30:   let selection.cwd = "/"
line 31:   let jobid = jobstart(selection.argv, selection)
line 32:   if jobid > 0
line 33:     call jobsend(jobid, a:lines)
line 34:     call jobclose(jobid, 'stdin')
line 35:     " xclip does not close stdout when receiving input via stdin
line 36:     if selection.argv[0] ==# 'xclip'
line 37: 